[{
  "name": "vector",
  "aliases": null,
  "signatures": ["(vector <obj> ...)"],
  "description": "Construct a vector containing \"<obj> ...\".\nCreate vector literals via the [<item> ...] syntax.\nVectors are applicable to an index to get an entry: (<vector> <index>)",
  "example": null
}, {
  "name": "make-vector",
  "aliases": null,
  "signatures": ["(make-vector <length> <fill-value>)"],
  "description": "Construct a vector of <length> instances of <fill-value>.",
  "example": null
}, {
  "name": "vector-set!",
  "aliases": null,
  "signatures": ["(vector-set! <vector> <index> <obj>)"],
  "description": "Sets the entry at <index> in <vector> to be <obj>.",
  "example": null
}, {
  "name": "vector-fill!",
  "aliases": null,
  "signatures": ["(vector-fill! <vector> <fill-value>)"],
  "description": "Fill all of <vector> with <fill-value>.",
  "example": null
}, {
  "name": "vector-grow!",
  "aliases": null,
  "signatures": ["(vector-grow! <vector> <length> <fill-value>)"],
  "description": "Grow <vector> by <length> items set to <fill-value>.",
  "example": null
}, {
  "name": "vector-insert!",
  "aliases": null,
  "signatures": ["(vector-insert! <vector> <index> <obj>)"],
  "description": "Insert <obj> at <index> in <vector>, shifting back following items as needed.",
  "example": null
}, {
  "name": "vector-delete!",
  "aliases": null,
  "signatures": ["(vector-delete! <vector> <index>)"],
  "description": "Deletes the entry at <index> in <vector>. Returns the deleted item.",
  "example": null
}, {
  "name": "vector-push!",
  "aliases": null,
  "signatures": ["(vector-push! <vector> <obj>)"],
  "description": "Pushes <obj> to the back of <vector>.",
  "example": null
}, {
  "name": "vector-push-front!",
  "aliases": null,
  "signatures": ["(vector-push-front! <vector> <obj>)"],
  "description": "Pushes <obj> to the front of <vector>.",
  "example": null
}, {
  "name": "vector-pop!",
  "aliases": null,
  "signatures": ["(vector-pop! <vector> <obj>)"],
  "description": "Pops <obj> from the back of <vector>. Returns the popped item.",
  "example": null
}, {
  "name": "vector-pop-front!",
  "aliases": null,
  "signatures": ["(vector-pop-front! <vector> <obj>)"],
  "description": "Pops <obj> from the front of <vector>. Returns the popped item.",
  "example": null
}, {
  "name": "vector-append!",
  "aliases": null,
  "signatures": ["(vector-append! <vector> <appended-vector> ...)"],
  "description": "Append \"<appended-vector> ...\" to <vector> (thereby mutating it).",
  "example": null
}, {
  "name": "vector-unfold",
  "aliases": null,
  "signatures": ["(vector-unfold <break-condition> <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a vector from left to right, starting with <seed>. <break-condition>\ndetermines when unfolding stops, <map-callable> maps the <seed> to a value\nin the unfolded vector, and <successor-callable> increments <seed> for the\nnext round of unfolding.",
  "example": null
}, {
  "name": "vector-unfold-right",
  "aliases": null,
  "signatures": ["(vector-unfold-right <break-condition> <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a vector from right to left, starting with <seed>. <break-condition>\ndetermines when unfolding stops, <map-callable> maps the <seed> to a value\nin the unfolded vector, and <successor-callable> increments <seed> for the\nnext round of unfolding.",
  "example": null
}, {
  "name": "vector-memq",
  "aliases": null,
  "signatures": ["(vector-memq <vector> <obj>)"],
  "description": "Returns the index of <obj> in <vector>, or #f if its missing.\nUses <eq?> for comparisons.",
  "example": null
}, {
  "name": "vector-member",
  "aliases": null,
  "signatures": ["(vector-member <vector> <obj>)"],
  "description": "Returns the index of <obj> in <vector>, or #f if its missing.\nUses <equal?> for comparisons.",
  "example": null
}, {
  "name": "vector?",
  "aliases": null,
  "signatures": ["(vector? <obj>)"],
  "description": "Returns whether <obj> is a vector.",
  "example": null
}]