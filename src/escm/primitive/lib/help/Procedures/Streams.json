[{
  "name": "stream-pair?",
  "aliases": null,
  "signatures": ["(stream-pair? <obj>)"],
  "description": "Returns whether <obj> is a stream-pair created by <scons>.",
  "example": null
}, {
  "name": "stream?",
  "aliases": null,
  "signatures": ["(stream? <obj>)"],
  "description": "Returns whether <obj> is a stream. Equivalent to:\n  (or (stream-pair? <obj>) (null? <obj>))",
  "example": null
}, {
  "name": "scar",
  "aliases": null,
  "signatures": ["(scar <stream-pair>)"],
  "description": "Access the first item in a stream-pair.",
  "example": null
}, {
  "name": "scdr",
  "aliases": null,
  "signatures": ["(scdr <stream-pair>)"],
  "description": "Access the second item in a stream-pair.",
  "example": null
}, {
  "name": "scaar",
  "aliases": null,
  "signatures": ["(scaar <stream-pair>)"],
  "description": "Equivalent to: (scar (scar <stream-pair>))",
  "example": null
}, {
  "name": "scadr",
  "aliases": null,
  "signatures": ["(scadr <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr <stream-pair>))",
  "example": null
}, {
  "name": "scdar",
  "aliases": null,
  "signatures": ["(scdar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar <stream-pair>))",
  "example": null
}, {
  "name": "scddr",
  "aliases": null,
  "signatures": ["(scddr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr <stream-pair>))",
  "example": null
}, {
  "name": "scaaar",
  "aliases": null,
  "signatures": ["(scaaar <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scar <stream-pair>)))",
  "example": null
}, {
  "name": "scaadr",
  "aliases": null,
  "signatures": ["(scaadr <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scdr <stream-pair>)))",
  "example": null
}, {
  "name": "scadar",
  "aliases": null,
  "signatures": ["(scadar <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scar <stream-pair>)))",
  "example": null
}, {
  "name": "scaddr",
  "aliases": null,
  "signatures": ["(scaddr <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scdr <stream-pair>)))",
  "example": null
}, {
  "name": "scdaar",
  "aliases": null,
  "signatures": ["(scdaar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scar <stream-pair>)))",
  "example": null
}, {
  "name": "scdadr",
  "aliases": null,
  "signatures": ["(scdadr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scdr <stream-pair>)))",
  "example": null
}, {
  "name": "scddar",
  "aliases": null,
  "signatures": ["(scddar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scar <stream-pair>)))",
  "example": null
}, {
  "name": "scdddr",
  "aliases": null,
  "signatures": ["(scdddr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scdr <stream-pair>)))",
  "example": null
}, {
  "name": "scaaaar",
  "aliases": null,
  "signatures": ["(scaaaar <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scar (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scaaadr",
  "aliases": null,
  "signatures": ["(scaaadr <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scar (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scaadar",
  "aliases": null,
  "signatures": ["(scaadar <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scdr (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scaaddr",
  "aliases": null,
  "signatures": ["(scaaddr <stream-pair>)"],
  "description": "Equivalent to: (scar (scar (scdr (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scadaar",
  "aliases": null,
  "signatures": ["(scadaar <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scar (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scadadr",
  "aliases": null,
  "signatures": ["(scadadr <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scar (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scaddar",
  "aliases": null,
  "signatures": ["(scaddar <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scdr (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scadddr",
  "aliases": null,
  "signatures": ["(scadddr <stream-pair>)"],
  "description": "Equivalent to: (scar (scdr (scdr (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scdaaar",
  "aliases": null,
  "signatures": ["(scdaaar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scar (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scdaadr",
  "aliases": null,
  "signatures": ["(scdaadr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scar (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scdadar",
  "aliases": null,
  "signatures": ["(scdadar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scdr (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scdaddr",
  "aliases": null,
  "signatures": ["(scdaddr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scar (scdr (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scddaar",
  "aliases": null,
  "signatures": ["(scddaar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scar (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scddadr",
  "aliases": null,
  "signatures": ["(scddadr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scar (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "scdddar",
  "aliases": null,
  "signatures": ["(scdddar <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scdr (scar <stream-pair>))))",
  "example": null
}, {
  "name": "scddddr",
  "aliases": null,
  "signatures": ["(scddddr <stream-pair>)"],
  "description": "Equivalent to: (scdr (scdr (scdr (scdr <stream-pair>))))",
  "example": null
}, {
  "name": "stream->list",
  "aliases": null,
  "signatures": ["(stream->list <stream> <list-length>)"],
  "description": "Return the first <list-length> items in <stream> as a list.",
  "example": null
}, {
  "name": "stream-val",
  "aliases": null,
  "signatures": ["(stream-val <stream> <index>)"],
  "description": "Return the <index>th item in <stream>.",
  "example": null
}, {
  "name": "stream-map",
  "aliases": null,
  "signatures": ["(stream-map <callable> <stream> ...)"],
  "description": "Generate a new stream by applying <callable> to each of the items in\n\"<stream> ...\". Executes lazily.",
  "example": null
}, {
  "name": "stream-filter",
  "aliases": null,
  "signatures": ["(stream-filter <predicate?> <stream>)"],
  "description": "Generate a new stream by filtering out items in <stream> that don't\nsatisfy <predicate?>. Executes lazily.",
  "example": null
}, {
  "name": "stream-iterate",
  "aliases": null,
  "signatures": ["(stream-iterate <update-callable> <seed>)"],
  "description": "Generate an infinite stream by starting with <seed> and updating it\nwith <update-callable>. Executes lazily.",
  "example": null
}, {
  "name": "stream-constant",
  "aliases": null,
  "signatures": ["(stream-constant <obj> ...)"],
  "description": "Return an infinite stream of \"<obj> ...\" repeating in a cycle. Executes lazily.",
  "example": null
}, {
  "name": "stream-append",
  "aliases": null,
  "signatures": ["(stream-append <stream> ...)"],
  "description": "Returns a new stream of \"<stream> ...\" appended to one another.",
  "example": null
}, {
  "name": "stream-interleave",
  "aliases": null,
  "signatures": ["(stream-interleave <stream1> <stream2>)"],
  "description": "Return a stream with the interleaved values of <stream1> and <stream2>.\nExecutes lazily.",
  "example": null
}, {
  "name": "stream->generator",
  "aliases": null,
  "signatures": ["(stream->generator <stream>)"],
  "description": "Return a thunk (nullary procedure) that, upon invocation, returns the\nnext item in the stream.\nReturns <*generator-complete*> once at the end of the stream.",
  "example": null
}, {
  "name": "stream-member",
  "aliases": null,
  "signatures": ["(stream-member <obj> <stream>)"],
  "description": "Returns the substream in <stream> starting with <obj> based on <equal?> item\nequality. Returns #f if <obj> isn't in <stream>. Note that this will run\nforever if <obj> isn't in <stream> and <stream> is infinite.",
  "example": null
}, {
  "name": "stream-memq",
  "aliases": null,
  "signatures": ["(stream-memq <obj> <stream>)"],
  "description": "Returns the substream in <stream> starting with <obj> based on <eq?> item\nequality. Returns #f if <obj> isn't in <stream>. Note that this will run\nforever if <obj> isn't in <stream> and <stream> is infinite.",
  "example": null
}, {
  "name": "stream-take",
  "aliases": null,
  "signatures": ["(stream-take <stream> <length>)"],
  "description": "Returns the first <length> items in <stream> as another stream.",
  "example": null
}, {
  "name": "stream-take-while",
  "aliases": null,
  "signatures": ["(stream-take-while <predicate?> <stream>)"],
  "description": "Returns a stream with the first items in <stream> while they satisfy\n<predicate?>.",
  "example": null
}, {
  "name": "stream-drop",
  "aliases": null,
  "signatures": ["(stream-drop <stream> <length>)"],
  "description": "Returns <stream> without its first <length> items as another stream.",
  "example": null
}, {
  "name": "stream-drop-while",
  "aliases": null,
  "signatures": ["(stream-drop-while <predicate?> <stream>)"],
  "description": "Returns <stream> without all of the leading items that satisfy <predicate?>\nas another stream. Note that this will run forever if <stream> is infinite\nand every item in it satisfies <predicate?>.",
  "example": null
}, {
  "name": "stream-slice",
  "aliases": null,
  "signatures": ["(stream-slice <stream> <start-index>)", "(stream-slice <stream> <start-index> <length>)", "(stream-slice <stream> <start-index> <predicate?>)"],
  "description": "Slices a subset of the items in <stream> starting from <start-index>.\nIf no other args are given, returns the rest of the items from <start-index>.\nIf <length> is given, returns at most <length> items.\nGiven <predicate?>, slices while values satisfy <predicate?>.\n\nNote that this may run infinitely if given an infinite stream where every\nvalue satisfies <predicate?>",
  "example": null
}, {
  "name": "stream-unfold",
  "aliases": null,
  "signatures": ["(stream-unfold <break-condition> <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a stream from left to right, starting with <seed>. <break-condition>\ndetermines when unfolding stops, <map-callable> maps the <seed> to a value\nin the unfolded stream, and <successor-callable> increments <seed> for the\nnext round of unfolding.\n\nSee <stream-unfolds> for an alternative without <break-condition>.",
  "example": null
}, {
  "name": "stream-unfolds",
  "aliases": null,
  "signatures": ["(stream-unfolds <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a stream from left to right, starting with <seed>. <map-callable>\nmaps the <seed> to a value in the unfolded stream, and <successor-callable>\nincrements <seed> for the next round of unfolding.\n\nSee <stream-unfold> for an alternative with a <break-condition>.",
  "example": null
}]