[{
  "name": "char?",
  "aliases": ["character?"],
  "signatures": ["(char? <obj>)"],
  "description": "Returns whether <obj> is a character value.",
  "example": null
}, {
  "name": "char-alphabetic?",
  "aliases": null,
  "signatures": ["(char-alphabetic? <char>)"],
  "description": "Returns whether <char> is alphabetic.",
  "example": null
}, {
  "name": "char-numeric?",
  "aliases": null,
  "signatures": ["(char-numeric? <char>)"],
  "description": "Returns whether <char> is numeric.",
  "example": null
}, {
  "name": "char-whitespace?",
  "aliases": null,
  "signatures": ["(char-whitespace? <char>)"],
  "description": "Returns whether <char> is whitespace.",
  "example": null
}, {
  "name": "char-upper-case?",
  "aliases": null,
  "signatures": ["(char-upper-case? <char>)"],
  "description": "Returns whether <char> is uppercase.",
  "example": null
}, {
  "name": "char-lower-case?",
  "aliases": null,
  "description": "Returns whether <char> is lowercase.",
  "example": null
}, {
  "name": "char-alphanumeric?",
  "aliases": null,
  "description": "Returns whether <char> is alphabetic or numeric.",
  "example": null
}, {
  "name": "char-control?",
  "aliases": null,
  "signatures": ["(char-control? <char>)"],
  "description": "Returns whether <char> is a control character.",
  "example": null
}, {
  "name": "char-print?",
  "aliases": null,
  "signatures": ["(char-print? <char>)"],
  "description": "Returns whether <char> is printable, equivalent to:\n  (or (char-graph? <char>) (eq? #\\space <char>))",
  "example": null
}, {
  "name": "char-graph?",
  "aliases": null,
  "signatures": ["(char-graph? <char>)"],
  "description": "Returns whether <char> is a graph character, equivalent to:\n  (or (char-alphanumeric? <char>) (char-punctuation? <char>))",
  "example": null
}, {
  "name": "char-punctuation?",
  "aliases": null,
  "signatures": ["(char-punctuation? <char>)"],
  "description": "Returns whether <char> is a punctuation character.",
  "example": null
}, {
  "name": "char-xdigit?",
  "aliases": null,
  "signatures": ["(char-xdigit? <char>)"],
  "description": "Returns whether <char> is a hexadecimal digit.",
  "example": null
}, {
  "name": "char-upcase",
  "aliases": null,
  "signatures": ["(char-upcase <char>)"],
  "description": "Returns the upper-case version of <char>.",
  "example": null
}, {
  "name": "char-downcase",
  "aliases": null,
  "signatures": ["(char-downcase <char>)"],
  "description": "Returns the lower-case version of <char>.",
  "example": null
}, {
  "name": "char=?",
  "aliases": null,
  "signatures": ["(char=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are equal to one another.",
  "example": null
}, {
  "name": "char<?",
  "aliases": null,
  "signatures": ["(char<? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are less than one another.",
  "example": null
}, {
  "name": "char>?",
  "aliases": null,
  "signatures": ["(char>? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are greater than one another.",
  "example": null
}, {
  "name": "char<=?",
  "aliases": null,
  "signatures": ["(char<=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are less than or equal to one another.",
  "example": null
}, {
  "name": "char>=?",
  "aliases": null,
  "signatures": ["(char>=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are greater than or equal to one another.",
  "example": null
}, {
  "name": "char-ci=?",
  "aliases": null,
  "signatures": ["(char-ci=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are equal to one another (case-insensitive).",
  "example": null
}, {
  "name": "char-ci<?",
  "aliases": null,
  "signatures": ["(char-ci<? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are less than one another (case-insensitive).",
  "example": null
}, {
  "name": "char-ci>?",
  "aliases": null,
  "signatures": ["(char-ci>? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are greater than one another (case-insensitive).",
  "example": null
}, {
  "name": "char-ci<=?",
  "aliases": null,
  "signatures": ["(char-ci<=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are less than or equal to one another\n(case-insensitive).",
  "example": null
}, {
  "name": "char-ci>=?",
  "aliases": null,
  "signatures": ["(char-ci>=? <char> ...)"],
  "description": "Returns whether \"<char> ...\" are greater than or equal to one another\n(case-insensitive).",
  "example": null
}, {
  "name": "char-pair?",
  "aliases": null,
  "signatures": ["(char-pair? <char>)"],
  "description": "Returns whether <char> is a 32bit surrogate java char pair. Used to represent\n32bit unicode values, such codepoints become 2 java chars once stringified.\nNote that all EScheme string operations are codepoint-relative though! Hence a\nstring with a single surrogate java char pair in it will have a <length> of 1.\n\nSee <java-char?> to determine if a <char> is a 16bit unicode value, and\nsee <ascii-char?> to determine if a <char> is an ASCII value.",
  "example": null
}, {
  "name": "java-char?",
  "aliases": null,
  "signatures": ["(java-char? <char>)"],
  "description": "Returns whether <char> is a 16bit java char, correlating to exactly 1 char\nwithin strings under the hood. Note that all EScheme string operations are\ncodepoint-relative though! Hence a string with a single surrogate java\nchar pair in it will have a <length> of 1.\n\nSee <char-pair?> to determine if a <char> is a 32bit unicode value, and\nsee <ascii-char?> to determine if a <char> is an ASCII value.",
  "example": null
}, {
  "name": "ascii-char?",
  "aliases": null,
  "signatures": ["(ascii-char? <char>)"],
  "description": "Returns whether <char> is an 8bit ascii char, correlating to exactly 1 char\nwithin strings under the hood. Note that all EScheme string operations are\ncodepoint-relative though! Hence a string with a single surrogate java\nchar pair in it will have a <length> of 1.\n\nSee <char-pair?> to determine if a <char> is a 32bit unicode value, and\nsee <java-char?> to determine if a <char> is a 16bit unicode value.",
  "example": null
}, {
  "name": "char-count",
  "aliases": null,
  "signatures": ["(char-count <char>)"],
  "description": "Returns the number of java chars <char> stringifies to.\nReturns 2 if (char-pair? <char>), else returns 1.",
  "example": null
}, {
  "name": "char-digit",
  "aliases": null,
  "signatures": ["(char-digit <char>)", "(char-digit <char> <radix>)"],
  "description": "Returns the digit represented by <char> in <radix> (defaults to 36).\nReturns #f if <radix> is an invalid non-negative int or <char> isn't a digit.",
  "example": null
}, {
  "name": "char-for-digit",
  "aliases": null,
  "signatures": ["(char-for-digit <integer>)", "(char-for-digit <integer> <radix>)"],
  "description": "Returns the char representing digit <integer> in <radix> (defaults to 36).\nReturns #f if <radix> is an invalid non-negative int or <integer> isn't a digit.",
  "example": null
}, {
  "name": "char-name",
  "aliases": null,
  "signatures": ["(char-name <char>)"],
  "description": "Returns <char>'s name as a string, or #f if its an unassigned unicode value.",
  "example": null
}, {
  "name": "char-defined?",
  "aliases": null,
  "signatures": ["(char-defined? <char>)"],
  "description": "Returns whether <char> is an unassigned unicode value.",
  "example": null
}, {
  "name": "char-high?",
  "aliases": null,
  "signatures": ["(char-high? <char>)"],
  "description": "Returns whether <char> is the high portion of a 32bit surrogate char pair.",
  "example": null
}, {
  "name": "char-low?",
  "aliases": null,
  "signatures": ["(char-low? <char>)"],
  "description": "Returns whether <char> is the low portion of a 32bit surrogate char pair.",
  "example": null
}, {
  "name": "char-high",
  "aliases": null,
  "signatures": ["(char-high <char>)"],
  "description": "Returns the high portion of <char> if it's a 32 surrogate pair.\nIf (java-char? <char>), returns #f.",
  "example": null
}, {
  "name": "char-low",
  "aliases": null,
  "signatures": ["(char-low <char>)"],
  "description": "Returns the low portion of <char> if it's a 32 surrogate pair.\nIf (java-char? <char>), returns #f.",
  "example": null
}, {
  "name": "char-codepoint",
  "aliases": null,
  "signatures": ["(char-codepoint <high-char> <low-char>)"],
  "description": "Returns a new character formed by combining <high-char> & <low-char> into\na single 32bit surrogate char pair.\nReturns #f if (not (and (char-high? <high-char>) (char-low? <low-char>)))",
  "example": null
}]