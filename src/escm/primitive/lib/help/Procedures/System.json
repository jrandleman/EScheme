[{
  "name": "exit",
  "aliases": ["quit"],
  "signatures": ["(exit)", "(exit <integer-exit-code>)"],
  "description": "Terminate the current EScheme session with <integer-exit-code> (defaults to 0).",
  "example": null
}, {
  "name": "load",
  "aliases": null,
  "signatures": ["(load <filename-str>)", "(load <directory-str> <filename-str>)"],
  "description": "Reads and evaluates <filename-str>'s EScheme contents in the global environment.\nWorks for both regular & <serialize>d EScheme files.\nIf given <directory-str>, loads <filename-str> from <directory-str>. Use:\n\n  (load #path <filename-str>)\n\nas a portable alternative to (load <filename-str>) if <filename-str> is a\nrelative path, since <load> only operates relative to (current-directory).\n\nNote that <load-once> should be preferred to prevent cyclic loading.\n",
  "example": null
}, {
  "name": "load-once",
  "aliases": null,
  "signatures": ["(load-once <filename-str>)", "(load-once <directory-str> <filename-str>)"],
  "description": "Works exactly like <load>, but only loads unloaded files. Use:\n\n  (load-once #path <filename-str>)\n\nas a portable alternative to (load-once <filename-str>) if <filename-str> is a\nrelative path, since <load-once> only operates relative to (current-directory).",
  "example": null
}, {
  "name": "module?",
  "aliases": null,
  "signatures": ["(module? <obj>)"],
  "description": "Returns whether <obj> is a module object.",
  "example": null
}, {
  "name": "module-path",
  "aliases": null,
  "signatures": ["(module-path <module>)"],
  "description": "Returns the absolute file path of <module>'s original location.",
  "example": null
}, {
  "name": "module-bindings",
  "aliases": null,
  "signatures": ["(module-bindings <module>)"],
  "description": "Returns a list of the symbols defined in <module>.\nBe warned: every module has its own copy of the standard library defined too!",
  "example": null
}, {
  "name": "system",
  "aliases": null,
  "signatures": [
                  "(system <command-str>)",
                  "(system <command-str> <env-var-str-list>)",
                  "(system <command-str> <directory-str>)",
                  "(system <command-str> <env-var-str-list> <directory-str>)",
                  "(system <millisecond-timeout> <command-str>)",
                  "(system <millisecond-timeout> <command-str> <env-var-str-list>)",
                  "(system <millisecond-timeout> <command-str> <directory-str>)",
                  "(system <millisecond-timeout> <command-str> <env-var-str-list> <directory-str>)"
                ],
  "description": "Executes a command, using the environment variable bindings in\n<env-var-str-list> (defaults to those of the current environment), \nin the <directory-str> directory (defaults to the current working \ndirectory).\n\nNote that each environment variable string in <env-var-str-list>\nshould follow the \"name=value\" format.\n\nIf <millisecond-timeout> (a real number) is given and exceeded, the\nspawned process will terminate. Note that this is NOT a hard cap \nthough: hence passing 0 as <millisecond-timeout> may still have \nsystem-wide side effects.\n\nUltimately passed to Java's <Runtime.getRuntime().exec()>.\nReferenced by <escm>.\n\nReturns a list:\n  (<command-stdout-str> <command-stderr-str> <command-exit-code>)",
  "example": null
}, {
  "name": "escm",
  "aliases": null,
  "signatures": ["(escm <escm-file> <optional-argv> ...)", "(escm <millisecond-timeout> <escm-file> <optional-argv> ...)"],
  "description": "Execute an EScheme program in a seperate process. Effectively a wrapper \naround <system> that references <*escm-execution-command*>. Displays each \n<argv> to generate a single command string with <escm-file>.\n\nIf <millisecond-timeout> (a real number) is given and exceeded, the\nspawned process will terminate. Note that this is NOT a hard cap \nthough: hence passing 0 as <millisecond-timeout> may still have \nsystem-wide side effects.\n\nReturns a list:\n  (<program-stdout-str> <program-stderr-str> <program-exit-code>)",
  "example": null
}, {
  "name": "getenv",
  "aliases": null,
  "signatures": ["(getenv)", "(getenv <var-name-str>)"],
  "description": "If given no arguments, return a hashmap of name:value string environment \nvariable associations.\n\nIf given an environment variable name string, returns its string value. \nIf the given string is not an accessable environment variable, returns #f",
  "example": null
}]