[{
  "name": "callable-signature",
  "aliases": ["signature"],
  "signatures": ["(callable-signature <callable>)"],
  "description": "Get the <callable> call signature as EScheme data, or #f if unavailable.\n\nFor unary parameter lists: returns the parameter clause as a list of symbols.\nFor binary+ parameter lists: returns a list of parameter clauses.\n\nNote that the symbols '... & '. denote variadic parameters.\n\nAn argument list may be used to denote a default argument value.",
  "example": null
}, {
  "name": "callable-name",
  "aliases": null,
  "signatures": ["(callable-name <callable>)"],
  "description": "Get the <callable>'s name as EScheme data, or #f if unavailable.",
  "example": null
}, {
  "name": "docstring",
  "aliases": null,
  "signatures": ["(docstring <obj>)"],
  "description": "Get the <obj>'s docstring if available, else #f.\n\nDocstrings are used to give details on objects passed to the <help> function,\nand **MUST** be writted as string literals to register as valid syntax (e.g.\nfor procedures, classes, interfaces, etc.).\n\nNote that docstring newlines and tabs should be added by users exactly as\nthey'd like their docstring to render in the <help> menu: no additional\nformatting will be done!",
  "example": null
}, {
  "name": "apply",
  "aliases": null,
  "signatures": ["(apply <callable> <obj-argument-list>)"],
  "description": "Apply <callable> to the arguments stored in the <obj-argument-list> list.",
  "example": null
}, {
  "name": "compile",
  "aliases": null,
  "signatures": ["(compile <quoted-escm-expression>)"],
  "description": "Convert <quoted-escm-expression> into a list of its equivalent bytecode instructions.",
  "example": null
}, {
  "name": "eval-bytecode",
  "aliases": null,
  "signatures": ["(eval-bytecode <quoted-escm-bytecode-list>)"],
  "description": "Evaluate <quoted-escm-bytecode-list> to produce a result.",
  "example": null
}, {
  "name": "eval",
  "aliases": null,
  "signatures": ["(eval <quoted-escm-expression>)"],
  "description": "Evaluate <quoted-escm-expression> to produce a result. Equivalent to:\n  (eval-bytecode (compile <quoted-escm-expression>))",
  "example": null
}, {
  "name": "gensym",
  "aliases": null,
  "signatures": ["(gensym)", "(gensym <name-symbol>)"],
  "description": "Returns a fresh, unique symbol. Guarentees that the symbol is unique across\nthreads as well. Used extensively by macros. Pass a <name-symbol> to improve\nreadability when printing generated symbols.",
  "example": null
}, {
  "name": "syntax?",
  "aliases": null,
  "signatures": ["(syntax? <obj>)"],
  "description": "Returns whether <obj> is a syntax object. Syntax objects are created when\nmacros are evaluated as a procedure argument.",
  "example": null
}, {
  "name": "expand-syntax",
  "aliases": null,
  "signatures": ["(expand-syntax <quoted-macro-expression>)"],
  "description": "Returns the expansion of <quoted-macro-expression> by executing its macro.",
  "example": null
}]