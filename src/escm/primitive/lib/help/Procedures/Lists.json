[{
  "name": "list",
  "aliases": null,
  "signatures": ["(list <obj> ...)", "(list)"],
  "description": "Return a list containing \"<obj> ...\". Given no args, returns (quote ()).\nLists are right-nested pairs ending in nil: (quote ())\nCreate list literals via the (<item> ...) syntax.",
  "example": null
}, {
  "name": "list*",
  "aliases": null,
  "signatures": ["(list* <obj1> <obj2> ...)"],
  "description": "Return a dotted.list containing \"<obj1> <obj2> ...\".",
  "example": null
}, {
  "name": "unfold",
  "aliases": null,
  "signatures": ["(unfold <break-condition> <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a list from left to right, starting with <seed>. <break-condition>\ndetermines when unfolding stops, <map-callable> maps the <seed> to a value\nin the unfolded list, and <successor-callable> increments <seed> for the\nnext round of unfolding.",
  "example": null
}, {
  "name": "unfold-right",
  "aliases": null,
  "signatures": ["(unfold-right <break-condition> <map-callable> <successor-callable> <seed>)"],
  "description": "Unfolds a list from right to left, starting with <seed>. <break-condition>\ndetermines when unfolding stops, <map-callable> maps the <seed> to a value\nin the unfolded list, and <successor-callable> increments <seed> for the\nnext round of unfolding.",
  "example": null
}, {
  "name": "memq",
  "aliases": null,
  "signatures": ["(memq <obj> <list>)"],
  "description": "Returns the sublist in <list> starting with <obj> based on <eq?> item\nequality. Returns #f if <obj> isn't in <list>.",
  "example": null
}, {
  "name": "member",
  "aliases": null,
  "signatures": ["(member <obj> <list>)"],
  "description": "Returns the sublist in <list> starting with <obj> based on <equal?> item\nequality. Returns #f if <obj> isn't in <list>.",
  "example": null
}, {
  "name": "assq",
  "aliases": null,
  "signatures": ["(assq <key-obj> <alist>)"],
  "description": "Returns the pair in associative-lsit <alist> starting with <key-obj> based\non <eq?> item equality. Returns #f if <obj> isn't a key in in <alist>.",
  "example": null
}, {
  "name": "assoc",
  "aliases": null,
  "signatures": ["(assoc <key-obj> <alist>)"],
  "description": "Returns the pair in associative-lsit <alist> starting with <key-obj> based\non <equal?> item equality. Returns #f if <obj> isn't a key in in <alist>.",
  "example": null
}, {
  "name": "list?",
  "aliases": null,
  "signatures": ["(list? <obj>)"],
  "description": "Returns whether <obj> is a proper list.",
  "example": null
}, {
  "name": "list*?",
  "aliases": null,
  "signatures": ["(list*? <obj>)"],
  "description": "Returns whether <obj> is a dotted-list.",
  "example": null
}, {
  "name": "alist?",
  "aliases": ["associative-list?"],
  "signatures": ["(alist? <obj>)"],
  "description": "Returns whether <obj> is an associative list (list of pairs).",
  "example": null
}, {
  "name": "null?",
  "aliases": ["nil?"],
  "signatures": ["(null? <obj>)"],
  "description": "Returns whether <obj> is null (aka \"nil\").",
  "example": null
}]