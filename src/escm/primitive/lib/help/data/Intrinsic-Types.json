[
  {
    "name": "associative-collection",
    "description": "Family of collection types that associate keys to values.\nUsed to provide a generic interface across algorithmic primitives!\n\nHashmaps are the most flexible example of such (supporting arbitrary key &\nvalue types), while strings are the most restrictive (only supporting index\nkeys and character values).\n\nTheir coercion hierarchy is as follows: String < List < Vector < Hashmap"
  },
  {
    "name": "ordered-collection",
    "description": "Family of collection types that associate ordered indices to values.\nUsed to provide a generic interface across algorithmic primitives!\nTheir coercion hierarchy is as follows: String < List < Vector"
  },
  {
    "name": "callable",
    "description": "Any EScheme value that can be applied to arguments: (<callable> <argument> ...)\n\nThis includes procedures, functors (objects with a '->procedure' method defined),\nclasses (to invoke their constructor), as well as O(1)-access containers\n(strings, vectors, and hashmaps)."
  },
  {
    "name": "meta-object",
    "description": "Super type of objects, classes, and interfaces, all of which support\n'dot-notation' to access a property. \n\nNote that, despite supporting dot-notation, modules are not meta-objects."
  },
  {
    "name": "syntax",
    "description": "The value that macros evaluate to when passed as a procedure argument.\nThe only value that yields true with <syntax?>, and can be applied to\na list of quoted macros arguments via <apply> like any other procedure."
  },
  {
    "name": "number",
    "description": "\nEScheme provides a rich numeric tower, in keeping with its second namesake.\n\nThis entails fully supporting big integers, fractions, doubles, complex numbers, \nexactness conversions, radix-dependant parsing, and more!\n\nAn overview of EScheme's numeric literal syntax is provided below. See <help>\nfor more information on EScheme's numeric primitive functions.\n\n4 Number Types:\n 0. Exact/Ratnum (rational number)\n    *) Arbitrary precision numerator & denominator (automatically reduced to simplest form!)\n    *) Special Case: denominator of 1 creates a BigInt\n\n       -1/2 ; stays as a fraction!\n       3    ; ratnum w/ denom of 1 = bigint\n       4/2  ; gets simplified to bigint 2\n\n 1. Inexact/Flonum (floating-point number)\n    * Java <double> under the hood\n\n       1.0\n       3.5e10 ; scientific notation\n       -4E12  ; also scientific notation\n\n 2. Special Constants:\n    *) Positive Infinity: Infinity\n    *) Negative Infinity: -Infinity\n    *) Not-a-Number: NaN\n\n 3. Complex Numbers:\n    *) Both the real and imaginary components will match in exactness\n    *) Supports Infinity or -Infinity components (NaN is unique & never complex!)\n    *) Special Case: imaginary value of 0 becomes a real (non-complex) number!\n\n       3/4+1/2i\n       3/4+0.5i ; becomes 0.75+0.5i to match exactness\n       -i       ; valid complex number!\n       -44+0i   ; becomes -44\n\n2 Prefix Types:\n 0. Radix:\n    *) Binary: #b, Octal: #o, Hexadecimal: #x\n    *) Nary: #Nr (for N in [*min-radix*, *max-radix*])\n       - Note that (typically) *min-radix* is 2 and *max-radix* is 36\n\n       #b-101      ; -5\n       #b10/11     ; 2/3\n       #o77        ; 63\n       #xC0DE      ; 49374\n       #xc0de      ; 49374\n       #29rEScheme ; 8910753077\n       #2r-101/10  ; -5/2\n\n 1. Exactness:\n    *) Inexact: #i, Exact: #e\n\n       #i3      ; 3.0\n       #i1/2    ; 0.5\n       #e3.5    ; 7/2\n       #e1.0    ; 1\n       #i#2r101 ; Inexact & Binary! => 5.0"
  },
  {
    "name": "string",
    "description": "Also see the <string> procedure.\n\nRepresents a Java <string> under the hood (hence immutable).\nLiterals are denoted via double-quotes.\n\nStrings support the following control characters:\n  1) \"\\t\": tab,             represented as a char by #\\tab\n  2) \"\\n\": newline,         represented as a char by #\\newline\n  3) \"\\f\": form feed,       represented as a char by #\\page\n  4) \"\\r\": carriage return, represented as a char by #\\return\n  5) \"\\b\": backspace,       represented as a char by #\\backspace\n\nOctal literals may be used by prefixing up to 6 octal digits with \"\\\", ranging from\n\\0-\\177777 (0-65535 in decimal). This range ensures that each value fits neatly\nwithin a single 16bit Java char internally.\n  => Note this extends Java's octals, which only support \\0-\\377 (0-255 in decimal).\n\nJava 16bit unicode literals may be used by prefixing up to 4 hex digits with \"\\u\".\n  => Adjacent unicode literals may be used to create \"surrogate pairs\" that render\n     as a single unicode image for unicode values that require 32bit encoding.\n\nEScheme also extends Java unicode literals with syntax for 32bit unicode values.\nPrefixing up to 8 hex digits with \"\\U\" compiles to 2 seperate \"\\u\" instances.\n  => For example, both \"\\U1f608\" and \"\\ud83d\\ude08\" create the same string, but the\n     former is easier to write out after referencing the \"U+\" code from the internet.\n\nStrings are also applicable to an index to get a character: (<string> <index>)"
  },
  {
    "name": "character",
    "description": "Reader literals have the '#\\' prefix: #\\h #\\e #\\l #\\l #\\o #\\!\n\nRepresented by a 32bit codepoint internally:\n  * In keeping with Java, any codepoint <= 16bits correlates to a true, single\n    character in strings.\n  * Any codepoint above 16bits (as in Java) becomes 2 separate characters in \n    strings. However, most EScheme string operations (like <length>) operate \n    relative to the number of codepoints in a string, NOT to the number of\n    'java characters'.\n    - The only exceptions to this rule are EScheme's regex primtives, which \n      operate relative to 16bit characters since they wrap Java's regex ops.\n\nSupports Named Characters:\n  #\\space,     #\\tab, #\\newline, #\\page, #\\return,\n  #\\backspace, #\\nul, #\\esc,     #\\delete\n\nSupports Unicode Codepoints (note 'u' vs. 'U'):\n  #\\uXXXX (create a 16bit hex-code character)\n  #\\UXXXXXXXX (create a 32bit hex-code character)\n\nDisplaying characters prints them in a human-readable way, whereas writing them\nprints characters with their prefix such that they can be re-read by the reader\nas EScheme data."
  },
  {
    "name": "void",
    "description": "The \"nothing\" type, typically returned by non-pure actions that end in '!'.\nDenoted via #void"
  },
  {
    "name": "nil",
    "description": "The \"null\" type terminating lists. Denoted via (quote ()) and #nil"
  },
  {
    "name": "boolean",
    "description": "The boolean type. #t is true and #f is false. Any non-false value is truthy.\nTypically returned by predicate actions that end in '?'."
  },
  {
    "name": "keyword",
    "description": "Similar to symbols, but they always evaluate to themselves.\nDenoted as a symbol prefixed with ':'."
  },
  {
    "name": "symbol",
    "description": "Extensively used by metaprograms, symbols are variables that\nevaluate to another value."
  },
  {
    "name": "pair",
    "description": "An immutable pair of objects. <car> and <cdr> respectively get the 1st and 2nd\nitems. Right-nest them and end with #nil as the last <cdr> to create a list.\nCreate pair literals via the (<car> . <cdr>) syntax.\n\nFor example, the following are equivalent:\n  (list 1 2 3)\n  (cons 1 (cons 2 (cons 3 #nil)))"
  },
  {
    "name": "list",
    "description": "Also see the <list> procedure.\nA linked list containing \"<obj> ...\". The empty list is (quote ()).\nLists are right-nested pairs ending in nil: (quote ())\nCreate list literals via the (<item> ...) syntax."
  },
  {
    "name": "vector",
    "description": "Also see the <vector> procedure.\nA vector containing \"<obj> ...\".\nCreate vector literals via the [<item> ...] syntax.\nVectors are applicable to an index to get an entry: (<vector> <index>)"
  },
  {
    "name": "hashmap",
    "description": "Also see the <hashmap> procedure.\nA hashmap containing key-value associations of \"<key> <value> ...\".\nCreate hashmap literals via the {<key> <value> ...} syntax.\nHashmaps are applicable to a key to get their entry: (<hashmap> <key>)"
  },
  {
    "name": "stream",
    "description": "A lazy alternative to lists, where each item is only evaluated once accessed.\nUse <scar> and <scdr> respectively to access to the 1st and 2nd items.\n\nExample:\n  (define (sieve int-stream)\n    (scons\n      (scar int-stream)\n      (sieve\n        (stream-filter\n          (lambda (n) (positive? (remainder n (scar int-stream))))\n          (scdr int-stream)))))\n\n  (define (ints-from n)\n    (scons n (ints-from (+ n 1))))\n\n  (define primes (sieve (ints-from 2))) ; infinite stream of prime numbers!\n\n  (display (stream->list primes 13))\n  (newline)"
  },
  {
    "name": "stream-pair",
    "description": "A lazy alternative to pairs. Each item is only evaluated once accessed.\nNest them with #nil as the last <scdr> to create a stream.\n\nExample:\n  (define (sieve int-stream)\n    (scons\n      (scar int-stream)\n      (sieve\n        (stream-filter\n          (lambda (n) (positive? (remainder n (scar int-stream))))\n          (scdr int-stream)))))\n\n  (define (ints-from n)\n    (scons n (ints-from (+ n 1))))\n\n  (define primes (sieve (ints-from 2))) ; infinite stream of prime numbers!\n\n  (display (stream->list primes 13))\n  (newline)"
  },
  {
    "name": "eof",
    "description": "The \"end-of-file\" value terminating files.\nDenoted via #eof and detected via (eof? <obj>).\nEnds file/REPL evaluation early if read in as a single expression."
  },
  {
    "name": "port",
    "description": "Input and output ports are handles for read and write files (respectively).\nNote that output functions that end in \"+\" append to the port, whereas the\nalternative clears it out first."
  },
  {
    "name": "module",
    "description": "The value created by an <import> expression.\n\nModules present an alternative to Scheme's usual inter-file semantics.\n\nThe <load> function has always served as a means by which to execute the code\nof another Scheme file in the calling file's global environment. This simplicity\nis a double edged sword though: while making <load> easy to implement, it leaves\nmuch to be desired with respect to enabling encapsulation of code across\ncoordinated Scheme files.\n\nAs such, in addition to <load>, EScheme offers a minimalistic module system\nthat strives to enable file-specific encapsulation of EScheme code. Files\nprocessed via the <import> macro are defined as <module> objects within the\nenclosing enivironment. See the <import> 'help' entry for more details on how\nEScheme evaluates modules.\n\nEach module has its own isolated global environment, and has automatic access\nto EScheme's standard library. Note that this means that operations that depend\non global variables (e.g. <load-once>) are hence only able to operate on\na module-relative basis.\n\n  * Note that <dosync> notably works across modules, since its internal lock\n    was created via <define-parameter>. Use <dosync-module> for module-relative\n    locking behavior.\n\nBoth variables and macros can be access from a module by using EScheme's\ndot-notation: for example, to access variable 'PersonClass' from module 'Mod',\nwe write 'Mod.PersonClass'.\n\nFurther note that imported modules are cached! Importing the same module\nmultiple times does not cause multiple evaluations of that module. Use the\n<reload> macro if you'd like to forcefully re-evaluate the module in question.\n\nAdditionally, the <from> macro may be used to load specific variables within\na given module, without defining that module itself as a local variable.\n\nModules may be introspected upon by 2 primitives:\n\n  1. <module-path>: yield the absolute file path to the module (this is what\n     distinguishes one module from another under the hood).\n  2. <module-bindings>: yield a list of the symbols defined in a module (beware:\n     every module redefines the entire EScheme standard library!).\n\nNote that the 'meta-thread's environment (see <thread-define>) is module\nindependant!\n\nUse the '*import*' variable to determine if the current file was <import>ed.\nCan combine with <unless> to mimic Python's \"if __name__=='__main__':\" pattern:\n\n  (unless *import*\n    <execute-main-escheme-code-here> ...)\n\nLastly, note that the concept of 'parameter' variables exist in order to\nhave global state shared across modules. See the <define-parameter> and\n<parameter?> 'help' entries for more details."
  }
]
