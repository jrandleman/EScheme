[{
  "name": "=",
  "aliases": null,
  "signatures": ["(= <num> <num> ...)"],
  "description": "Returns whether \"<num> <num> ...\" are equal to one another.",
  "example": null
}, {
  "name": "<",
  "aliases": null,
  "signatures": ["(< <real> <real> ...)"],
  "description": "Returns whether \"<real> <real> ...\" are < one another.",
  "example": null
}, {
  "name": ">",
  "aliases": null,
  "signatures": ["(> <real> <real> ...)"],
  "description": "Returns whether \"<real> <real> ...\" are > one another.",
  "example": null
}, {
  "name": "<=",
  "aliases": null,
  "signatures": ["(<= <real> <real> ...)"],
  "description": "Returns whether \"<real> <real> ...\" are <= one another.",
  "example": null
}, {
  "name": ">=",
  "aliases": null,
  "signatures": ["(>= <real> <real> ...)"],
  "description": "Returns whether \"<real> <real> ...\" are >= one another.",
  "example": null
}, {
  "name": "+",
  "aliases": null,
  "signatures": ["(+ <num> <num> ...)"],
  "description": "Returns the sum of \"<num> <num> ...\".",
  "example": null
}, {
  "name": "-",
  "aliases": null,
  "signatures": ["(- <num> <num> ...)", "(- <num>)"],
  "description": "Returns the difference of \"<num> <num> ...\".\nIf given one <num>, returns its negative value.",
  "example": null
}, {
  "name": "/",
  "aliases": null,
  "signatures": ["(/ <num> <num> ...)", "(/ <num>)"],
  "description": "Returns the division of \"<num> <num> ...\".\nIf given one <num>, returns its inverse value.",
  "example": null
}, {
  "name": "*",
  "aliases": null,
  "signatures": ["(* <num> <num> ...)"],
  "description": "Returns the product of \"<num> <num> ...\".",
  "example": null
}, {
  "name": "expt",
  "aliases": null,
  "signatures": ["(expt <num> <num> ...)"],
  "description": "Returns the exponentiation of \"<num> <num> ...\".\nRemember that exponentiation is right-associative!",
  "example": null
}, {
  "name": "exp",
  "aliases": null,
  "signatures": ["(exp <num>)"],
  "description": "Returns Euler's number raised to the power of <num>.",
  "example": null
}, {
  "name": "log",
  "aliases": null,
  "signatures": ["(log <num>)", "(log <num> <base>)"],
  "description": "Returns the log base-<base> of <num>. <base> defaults to (exp 1).",
  "example": null
}, {
  "name": "sqrt",
  "aliases": null,
  "signatures": ["(sqrt <num>)"],
  "description": "Returns the square-root of <num>.",
  "example": null
}, {
  "name": "abs",
  "aliases": null,
  "signatures": ["(abs <real>)"],
  "description": "Returns the absolute value of <real>.",
  "example": null
}, {
  "name": "expt-mod",
  "aliases": null,
  "signatures": ["(expt-mod <base-real> <power-real> <mod-real>)"],
  "description": "Efficiently performs (modulo (expt <base-real> <power-real>) <mod-real>).",
  "example": null
}, {
  "name": "quotient",
  "aliases": null,
  "signatures": ["(quotient <real1> <real2>)"],
  "description": "Returns the quotient of (/ <real1> <real2>).",
  "example": null
}, {
  "name": "remainder",
  "aliases": null,
  "signatures": ["(remainder <real1> <real2>)"],
  "description": "Returns the remainder of (/ <real1> <real2>).",
  "example": null
}, {
  "name": "modulo",
  "aliases": null,
  "signatures": ["(modulo <real1> <real2>)"],
  "description": "Returns <real1> modulo <real2>.",
  "example": null
}, {
  "name": "divrem",
  "aliases": null,
  "signatures": ["(divrem <real1> <real2>)"],
  "description": "Returns a pair: the quotient & remainder of (/ <real1> <real2>).",
  "example": null
}, {
  "name": "modf",
  "aliases": null,
  "signatures": ["(modf <real>)"],
  "description": "Returns a pair: the integral & factional components of <real> as an inexact.",
  "example": null
}, {
  "name": "gcd",
  "aliases": null,
  "signatures": ["(gcd <integer1> <integer2>)"],
  "description": "Returns the greatest common denominator of <integer1> & <integer2>.",
  "example": null
}, {
  "name": "lcm",
  "aliases": null,
  "signatures": ["(lcm <integer1> <integer2>)"],
  "description": "Returns the least common multiple of <integer1> & <integer2>.",
  "example": null
}, {
  "name": "round",
  "aliases": null,
  "signatures": ["(round <real>)"],
  "description": "Returns the rounded value of <real>.",
  "example": null
}, {
  "name": "floor",
  "aliases": null,
  "signatures": ["(floor <real>)"],
  "description": "Returns the floored value of <real>.",
  "example": null
}, {
  "name": "ceiling",
  "aliases": null,
  "signatures": ["(ceiling <real>)"],
  "description": "Returns the ceiling value of <real>.",
  "example": null
}, {
  "name": "truncate",
  "aliases": null,
  "signatures": ["(truncate <real>)"],
  "description": "Returns the truncated value of <real>.",
  "example": null
}, {
  "name": "min",
  "aliases": null,
  "signatures": ["(min <real> ...)"],
  "description": "Returns the min value of \"<real> ...\".",
  "example": null
}, {
  "name": "max",
  "aliases": null,
  "signatures": ["(max <real> ...)"],
  "description": "Returns the max value of \"<real> ...\".",
  "example": null
}, {
  "name": "number?",
  "aliases": null,
  "signatures": ["(number? <obj>)"],
  "description": "Returns whether <obj> is a number.",
  "example": null
}, {
  "name": "complex?",
  "aliases": null,
  "signatures": ["(complex? <obj>)"],
  "description": "Returns whether <obj> is a complex number. Equivalent to <number?>.",
  "example": null
}, {
  "name": "real?",
  "aliases": null,
  "signatures": ["(real? <obj>)"],
  "description": "Returns whether <obj> is a real (non-complex) number.",
  "example": null
}, {
  "name": "inexact?",
  "aliases": null,
  "signatures": ["(inexact? <obj>)"],
  "description": "Returns whether <obj> is an inexact number.",
  "example": null
}, {
  "name": "exact?",
  "aliases": null,
  "signatures": ["(exact? <obj>)"],
  "description": "Returns whether <obj> is an exact number.",
  "example": null
}, {
  "name": "integer?",
  "aliases": null,
  "signatures": ["(integer? <obj>)"],
  "description": "Returns whether <obj> is an integer.",
  "example": null
}, {
  "name": "finite?",
  "aliases": null,
  "signatures": ["(finite? <obj>)"],
  "description": "Returns whether <obj> is a finite value.",
  "example": null
}, {
  "name": "infinite?",
  "aliases": null,
  "signatures": ["(infinite? <obj>)"],
  "description": "Returns whether <obj> is <Infinite>.",
  "example": null
}, {
  "name": "nan?",
  "aliases": null,
  "signatures": ["(nan? <obj>)"],
  "description": "Returns whether <obj> is <NaN>.",
  "example": null
}, {
  "name": "odd?",
  "aliases": null,
  "signatures": ["(odd? <real>)"],
  "description": "Returns whether <real> is odd.",
  "example": null
}, {
  "name": "even?",
  "aliases": null,
  "signatures": ["(even? <real>)"],
  "description": "Returns whether <real> is even.",
  "example": null
}, {
  "name": "positive?",
  "aliases": null,
  "signatures": ["(positive? <real>)"],
  "description": "Returns whether <real> is positive.",
  "example": null
}, {
  "name": "negative?",
  "aliases": null,
  "signatures": ["(negative? <real>)"],
  "description": "Returns whether <real> is negative.",
  "example": null
}, {
  "name": "zero?",
  "aliases": null,
  "signatures": ["(zero? <real>)"],
  "description": "Returns whether <real> is zero.",
  "example": null
}, {
  "name": "sin",
  "aliases": null,
  "signatures": ["(sin <num>)"],
  "description": "Returns the sin of <num>.",
  "example": null
}, {
  "name": "cos",
  "aliases": null,
  "signatures": ["(cos <num>)"],
  "description": "Returns the cos of <num>.",
  "example": null
}, {
  "name": "tan",
  "aliases": null,
  "signatures": ["(tan <num>)"],
  "description": "Returns the tan of <num>.",
  "example": null
}, {
  "name": "asin",
  "aliases": null,
  "signatures": ["(asin <num>)"],
  "description": "Returns the asin of <num>.",
  "example": null
}, {
  "name": "acos",
  "aliases": null,
  "signatures": ["(acos <num>)"],
  "description": "Returns the acos of <num>.",
  "example": null
}, {
  "name": "atan",
  "aliases": null,
  "signatures": ["(atan <num>)", "(atan <real1 <real2>)"],
  "description": "Returns the atan of <num>. If given 2 arguments, returns the atan in\nradians of (/ <real1> <real2>) based on the signs of both values\nto determine the correct quadrant.",
  "example": null
}, {
  "name": "sinh",
  "aliases": null,
  "signatures": ["(sinh <num>)"],
  "description": "Returns the sinh of <num>.",
  "example": null
}, {
  "name": "cosh",
  "aliases": null,
  "signatures": ["(cosh <num>)"],
  "description": "Returns the cosh of <num>.",
  "example": null
}, {
  "name": "tanh",
  "aliases": null,
  "signatures": ["(tanh <num>)"],
  "description": "Returns the tanh of <num>.",
  "example": null
}, {
  "name": "asinh",
  "aliases": null,
  "signatures": ["(asinh <num>)"],
  "description": "Returns the asinh of <num>.",
  "example": null
}, {
  "name": "acosh",
  "aliases": null,
  "signatures": ["(acosh <num>)"],
  "description": "Returns the acosh of <num>.",
  "example": null
}, {
  "name": "atanh",
  "aliases": null,
  "signatures": ["(atanh <num>)"],
  "description": "Returns the atanh of <num>.",
  "example": null
}, {
  "name": "npr",
  "aliases": null,
  "signatures": ["(npr <n-integer> <r-integer>)"],
  "description": "Returns the number of ways in which <r> different things\ncan be selected and arranged out of <n> different things.\nBoth integers must be non-negative.",
  "example": null
}, {
  "name": "ncr",
  "aliases": null,
  "signatures": ["(ncr <n-integer> <r-integer>)"],
  "description": "Returns the number of ways in which <r> different things\ncan be selected out of <n> different things.\nBoth integers must be non-negative.",
  "example": null
}, {
  "name": "random",
  "aliases": null,
  "signatures": ["(random)"],
  "description": "Returns a random number between 0.0 and 1.0.\nGuarenteed to be unique across threads.",
  "example": null
}, {
  "name": "make-rectangular",
  "aliases": null,
  "signatures": ["(make-rectangular <real-real> <imag-real>)"],
  "description": "Returns a complex number with <real> & <imag> as real & imaginary components.",
  "example": null
}, {
  "name": "make-polar",
  "aliases": null,
  "signatures": ["(make-rectangular <magnitude-real> <angle-real>)"],
  "description": "Returns a complex number with <magnitude> & <angle> as its magnitude & angle.",
  "example": null
}, {
  "name": "real-part",
  "aliases": null,
  "signatures": ["(real-part <number>)"],
  "description": "Returns the real component of <number>.",
  "example": null
}, {
  "name": "imag-part",
  "aliases": null,
  "signatures": ["(imag-part <number>)"],
  "description": "Returns the imaginary component of <number>.",
  "example": null
}, {
  "name": "magnitude",
  "aliases": null,
  "signatures": ["(magnitude <number>)"],
  "description": "Returns the magnitude of <number>.",
  "example": null
}, {
  "name": "angle",
  "aliases": null,
  "signatures": ["(angle <number>)"],
  "description": "Returns the angle of <number>.",
  "example": null
}, {
  "name": "conjugate",
  "aliases": null,
  "signatures": ["(conjugate <number>)"],
  "description": "Returns the conjugate of <number>.",
  "example": null
}]