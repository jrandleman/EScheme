[{
  "name": "typeof",
  "aliases": ["typename"],
  "signatures": ["(typeof <obj>)"],
  "description": "Returns <obj>'s type name as a symbol.",
  "example": null
}, {
  "name": "error",
  "aliases": null,
  "signatures": ["(error <reason>)", "(error <reason> <arg> ...)"],
  "description": "Triggers a fatal error, with <reason> displayed and \"<arg> ...\" written.",
  "example": null
}, {
  "name": "errorf",
  "aliases": null,
  "signatures": ["(errorf <format-string> <arg> ...)"],
  "description": "Triggers a fatal error, with <format-string> displayed & formatted with \"<arg> ...\".",
  "example": null
}, {
  "name": "copy",
  "aliases": null,
  "signatures": ["(copy <obj>)"],
  "description": "Returns a shallow (structural) copy of <obj>.",
  "example": null
}, {
  "name": "force",
  "aliases": null,
  "signatures": ["(force <delayed-expression>)"],
  "description": "Forces an expression delayed by the <delay> macro to be evaluated.",
  "example": null
}, {
  "name": "call/cc",
  "aliases": ["call-with-current-continuation"],
  "signatures": ["(call-with-current-continuation <unary-callable>)"],
  "description": "Calls <unary-callable> with the current continuation as its argument.\nAliased by <call/cc>.",
  "example": null
}, {
  "name": "dynamic-wind",
  "aliases": null,
  "signatures": ["(dynamic-wind <thunk1> <thunk2> <thunk3>)"],
  "description": "Executes <thunk1>, <thunk2>, <thunk3> in that order. <thunk3> is guarenteed\nto execute even if <thunk2> escapes via a continuation.",
  "example": null
}, {
  "name": "values",
  "aliases": null,
  "signatures": ["(values <obj> ...)"],
  "description": "Packs \"obj\" into a \"value object\" list.\nUsed in conjunction with <call-with-values>.\nSee the <let-values> macro for a simplfied syntax to bind <value> expressions.",
  "example": ";; Returns '(james . bond)\n(call-with-values\n  (lambda () (values 'bond 'james))\n  (lambda (x y) (cons y x)))"
}, {
  "name": "call-with-values",
  "aliases": null,
  "signatures": ["(call-with-values <thunk-producer> <callable-consumer>)"],
  "description": "Applies the \"values object\" returned by <thunk-producer>\nas args to <callable-consumer>.\nUsed in conjunction with <values>.\nSee the <let-values> macro for a simplfied syntax to bind <value> expressions.",
  "example": ";; Returns '(james . bond)\n(call-with-values\n  (lambda () (values 'bond 'james))\n  (lambda (x y) (cons y x)))"
}, {
  "name": "with-exception-handler",
  "aliases": null,
  "signatures": ["(with-exception-handler <unary-callable-handler> <callable-thunk>)"],
  "description": "Calls <callable-thunk>. If an exception is raised via <raise>,\nthat exception is passed to <unary-callable-handler>.\nNote that the handler should end by calling an escape continuation.\nAlso look into <guard> for nicer exception-handling syntax via macros.",
  "example": ";; Prints <'an-error>:\n(call-with-current-continuation\n (lambda (k)\n   (with-exception-handler (lambda (x)\n                             (display \"condition: \")\n                             (write x)\n                             (newline)\n                             (k 'exception))\n     (lambda ()\n       (+ 1 (raise 'an-error))))))"
}, {
  "name": "raise",
  "aliases": null,
  "signatures": ["(raise <obj>)"],
  "description": "Raises an exception by passing <obj> to the <unary-callable-handler>\nof <with-exception-handler>, or as the variable of <guard>.",
  "example": ";; Prints <'an-error>:\n(call-with-current-continuation\n (lambda (k)\n   (with-exception-handler (lambda (x)\n                             (display \"condition: \")\n                             (write x)\n                             (newline)\n                             (k 'exception))\n     (lambda ()\n       (+ 1 (raise 'an-error))))))"
}, {
  "name": "help",
  "aliases": null,
  "signatures": ["(help)", "(help <symbol>)", "(help <obj>)"],
  "description": "Our obligatory meta entry!\nNo Arguments:\n  Launch the interactive help menu.\nSymbol Argument:\n  Query for <symbol>'s help entry.\nObj Argument:\n  Get information about <obj>.",
  "example": null
}, {
  "name": "time",
  "aliases": null,
  "signatures": ["(time <callable> <arg> ...)"],
  "description": "Returns a pair after applying <callable> to \"<arg> ...\":\n  (<execution-time-in-milliseconds> . <result>)",
  "example": null
}, {
  "name": "serialize",
  "aliases": null,
  "signatures": ["(serialize <escm-file-path> <serialized-file-path>)"],
  "description": "Load and serialize the contents of <escm-file-path> into <serialized-file-path>.\n\nSerialization works by storing the Java bytecode of the assembled instruction\nset object holding <escm-file-path>'s EScheme bytecode in <serialized-file-path>.\nThe contents must first be evaluated in order to expand macros properly during\ncompilation.\n\nTotally optional to use, this facility is provided in order to squeeze the most\nperformance out of the EScheme runtime, since loading a serialized file skips\nboth reading and compiling the EScheme code therein, making its overall evaluation\nfaster.\n\nAll EScheme objects serialize just as you'd imagine, save for Threads and Ports.\nBy default, Java doesn't enable these items to be serialized since they rely on\nsystem-dependant components that don't translate to a different machine's processes.\nHowever, EScheme allows such to occur using the following rules:\n\n  1. Threads\n     * Threads serialize to their default, \"pre-run\" state. This means that\n       serialized threads save their name and runnable-callable. It does _NOT_\n       save any information about the executing sub-process if serialized mid-run.\n  2. Output-Ports\n     * Output-Ports serialize their absolute file path, and always deserialize\n       without appending (as if created via <open-output-file>).\n       - This is because deserialization re-loads the entire script containing\n         the port, and hence any writing operations conducted by the script ought\n         to reoccur during the script's loading process.\n     * Hence Output-Ports _MUST_ be serialized & deserialized on a machine with the\n       same directory layout, to avoid errors with the stored absolute-path!\n  3. Input-Ports\n     * Input-Ports serialize their absolute file path, and always deserialize with\n       their current line & column both set to 1 (reading from the start of the file).\n     * Hence Input-Ports _MUST_ be serialized & deserialized on a machine with the\n       same directory layout, to avoid errors with the stored absolute-path!\n\nOF NOTE: The semantics of thread/port serialization won't be an issue for 99.99999%\n*******  of serialized programs that use macros in a remotely sane way.\n\n         Only by intentionally returning a value that contains an initialized thread\n         or port datum from a macro can one tease out this behavior.\n\n         Given that most macros only return code as data structures (rather than\n         data values), these semantics are only something worth thinking about\n         if you're intentionally employing some genuinely tricky (& almost\n         certainly questionable) EScheme meta-programming techniques.\n\nLoad serialized EScheme code with the <load> primitive.",
  "example": null
}, {
  "name": "serialized?",
  "aliases": null,
  "signatures": ["(serialized? <file-path>)"],
  "description": "Returns whether <file-path> is a serialized file created by <serialize>.",
  "example": null
}]