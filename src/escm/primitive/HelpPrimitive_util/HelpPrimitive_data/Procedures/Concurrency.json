[{
  "name": "thread",
  "aliases": null,
  "signatures": ["(thread <callable-thunk>)", "(thread <name-str> <callable-thunk>)"],
  "description": "Create a new thread that invokes <callable-thunk> upon being passed to\n<thread-start!>. Returns <name-str> (defaults to a random string) if\npassed to <thread-name>.",
  "example": null
}, {
  "name": "thread?",
  "aliases": null,
  "signatures": ["(thread? <obj>)"],
  "description": "Returns whether <obj> is a thread.",
  "example": null
}, {
  "name": "thread-name",
  "aliases": null,
  "signatures": ["(thread-name <thread>)"],
  "description": "Returns <thread>'s name.",
  "example": null
}, {
  "name": "thread-id",
  "aliases": null,
  "signatures": ["(thread-id <thread>)"],
  "description": "Returns <thread>'s unique id.",
  "example": null
}, {
  "name": "thread-runnable",
  "aliases": null,
  "signatures": ["(thread-runnable <thread>)"],
  "description": "Returns <thread>'s callable thunk runnable.",
  "example": null
}, {
  "name": "thread-status",
  "aliases": null,
  "signatures": ["(thread-status <thread>)"],
  "description": "Returns <thread>'s status as a symbolic name:\n  'ready | 'running | 'blocked | 'waiting | 'timed-waiting | 'finished\n)",
  "example": null
}, {
  "name": "thread-yield",
  "aliases": null,
  "signatures": ["(thread-yield)"],
  "description": "Hints that the runtime may temporarily pause this thread if needed.",
  "example": null
}, {
  "name": "thread-set-daemon!",
  "aliases": null,
  "signatures": ["(thread-set-daemon! <thread> <boolean-status>)"],
  "description": "Tries to set <thread> to be a JVM daemon thread or not, based on\n<boolean-status>. Returns whether succeeded.",
  "example": null
}, {
  "name": "thread-daemon?",
  "aliases": null,
  "signatures": ["(thread-daemon? <thread>)"],
  "description": "Returns whether <thread> is a JVM daemon thread.",
  "example": null
}, {
  "name": "thread-priority",
  "aliases": null,
  "signatures": ["(thread-priority <thread>)"],
  "description": "Returns <thread>'s priority. See <*min-priority*> and <*max-priority*>.",
  "example": null
}, {
  "name": "thread-set-priority!",
  "aliases": null,
  "signatures": ["(thread-set-priority! <thread> <int-priority>)"],
  "description": "Tries to set <thread>'s priority to be <int-priority>.\nSee <*min-priority*> and <*max-priority*>.\nReturns whether succeeded.",
  "example": null
}, {
  "name": "thread-start!",
  "aliases": null,
  "signatures": ["(thread-start! <thread> ...)"],
  "description": "Starts \"<thread> ...\" and invokes their callable thunk runnables.\nReturns a list of threads that failed to start (e.g. already started).",
  "example": null
}, {
  "name": "thread-join!",
  "aliases": null,
  "signatures": ["(thread-join! <thread>)", "(thread-join! <thread> <max-ms-to-wait>)"],
  "description": "Waits for <thread> to join. If given <max-ms-to-wait>, waits that\nmany milliseconds prior returning control to the calling thread.\nReturns whether <thread> was interrupted.",
  "example": null
}, {
  "name": "thread-interrupted?",
  "aliases": null,
  "signatures": ["(thread-interrupted? <thread>)"],
  "description": "Returns whether <thread> was interrupted.",
  "example": null
}, {
  "name": "thread-interrupt!",
  "aliases": null,
  "signatures": ["(thread-interrupt! <thread>)"],
  "description": "Tries to interrupt <thread>, and returns whether succeeded.",
  "example": null
}, {
  "name": "interrupted?!",
  "aliases": null,
  "signatures": ["(interrupted?!)"],
  "description": "Returns whether the current thread has been interrupted.\nAlso clears its \"interrupted?\" flag afterwards.",
  "example": null
}, {
  "name": "sleep",
  "aliases": null,
  "signatures": ["(sleep <ms-to-sleep>)"],
  "description": "Has the current thread sleep for <ms-to-sleep> milliseconds.\nReturns whether was interrupted.",
  "example": null
}, {
  "name": "current-thread",
  "aliases": null,
  "signatures": ["(current-thread)"],
  "description": "Returns the current thread.",
  "example": null
}, {
  "name": "parallel",
  "aliases": null,
  "signatures": ["(parallel <callable-thunk> ...)"],
  "description": "Run the given \"<callable-thunk> ...\" items in parallel.",
  "example": null
}, {
  "name": "thread-define'",
  "aliases": null,
  "signatures": ["(thread-define' <symbolic-variable-name> <value>)", "(thread-define' <thread> <symbolic-variable-name> <value>)"],
  "description": "Bind <symbolic-variable-name> to <value> in <thread>'s\n(defaults to the \"meta-thread\") dynamic environment\n(effectively a thread-local global environment)\nUse the <thread-define> macro to pass <symbolic-variable-name> as a literal.\n\nNote that the \"meta-thread\" is a pseudo-thread accessable by all threads:\n  Thread dynamic environments \"inherit\" value bindings from the\n  \"meta-thread\" by caching a copy of them upon reference.",
  "example": null
}, {
  "name": "thread-set!'",
  "aliases": null,
  "signatures": ["(thread-set!' <symbolic-variable-name> <value>)", "(thread-set!' <thread> <symbolic-variable-name> <value>)"],
  "description": "Set <symbolic-variable-name> to <value> in <thread>'s\n(defaults to the \"meta-thread\") dynamic environment\n(effectively a thread-local global environment)\nUse the <thread-set!> macro to pass <symbolic-variable-name> as a literal.\n\nNote that the \"meta-thread\" is a pseudo-thread accessable by all threads:\n  Thread dynamic environments \"inherit\" value bindings from the\n  \"meta-thread\" by caching a copy of them upon reference.",
  "example": null
}, {
  "name": "thread-get'",
  "aliases": null,
  "signatures": ["(thread-get' <symbolic-variable-name>)", "(thread-get' <thread> <symbolic-variable-name>)"],
  "description": "Get <symbolic-variable-name>'s value in <thread>'s\n(defaults to the \"meta-thread\") dynamic environment\n(effectively a thread-local global environment)\nUse the <thread-get> macro to pass <symbolic-variable-name> as a literal.\n\nNote that the \"meta-thread\" is a pseudo-thread accessable by all threads:\n  Thread dynamic environments \"inherit\" value bindings from the\n  \"meta-thread\" by caching a copy of them upon reference.",
  "example": null
}, {
  "name": "thread-defined?'",
  "aliases": null,
  "signatures": ["(thread-defined?' <symbolic-variable-name>)", "(thread-defined?' <thread> <symbolic-variable-name>)"],
  "description": "Return whether <symbolic-variable-name> is defined in <thread>'s\n(defaults to the \"meta-thread\") dynamic environment\n(effectively a thread-local global environment)\nUse the <thread-get> macro to pass <symbolic-variable-name> as a literal.\n\nNote that the \"meta-thread\" is a pseudo-thread accessable by all threads:\n  Thread dynamic environments \"inherit\" value bindings from the\n  \"meta-thread\" by caching a copy of them upon reference.",
  "example": null
}, {
  "name": "thread-dynamic-environment",
  "aliases": null,
  "signatures": ["(thread-dynamic-environment)", "(thread-dynamic-environment <thread>)"],
  "description": "Return an associative list of the variables (and their values!) defined\nin <thread>'s (defaults to the \"meta-thread\") dynamic environment.\n\nNote that the \"meta-thread\" is a pseudo-thread accessable by all threads:\n  Thread dynamic environments \"inherit\" value bindings from the\n  \"meta-thread\" by caching a copy of them upon reference.",
  "example": null
}, {
  "name": "mutex",
  "aliases": null,
  "signatures": ["(mutex)", "(mutex <name-str>)"],
  "description": "Create a new reentrant-lock mutex. Returns <name-str> (defaults to a random string)\nif passed to <mutex-name>.",
  "example": null
}, {
  "name": "mutex?",
  "aliases": null,
  "signatures": ["(mutex? <obj>)"],
  "description": "Returns whether <obj> is a mutex.",
  "example": null
}, {
  "name": "mutex-name",
  "aliases": null,
  "signatures": ["(mutex-name <mutex>)"],
  "description": "Returns <mutex>'s name.",
  "example": null
}, {
  "name": "mutex-specific",
  "aliases": null,
  "signatures": ["(mutex-specific <mutex>)"],
  "description": "Get the variable value \"specifically associated\" with <mutex>.",
  "example": null
}, {
  "name": "mutex-specific-set!",
  "aliases": null,
  "signatures": ["(mutex-specific-set! <mutex> <obj>)"],
  "description": "Set the variable value \"specifically associated\" with <mutex> to <obj>.",
  "example": null
}, {
  "name": "mutex-lock!",
  "aliases": null,
  "signatures": ["(mutex-lock! <mutex>)", "(mutex-lock! <mutex> <millisecond-timeout>)"],
  "description": "Returns whether managed to acquired the lock prior to <millisecond-timeout>\n(defaults to Infinity).",
  "example": null
}, {
  "name": "mutex-unlock!",
  "aliases": null,
  "signatures": ["(mutex-unlock! <mutex>)"],
  "description": "Unlocks <mutex>. Returns #f if the current thread wasn't locking <mutex>.",
  "example": null
}, {
  "name": "mutex-locked?",
  "aliases": null,
  "signatures": ["(mutex-locked? <mutex>)"],
  "description": "Returns whether <mutex> is locked by any thread.",
  "example": null
}, {
  "name": "mutex-queue-length",
  "aliases": null,
  "signatures": ["(mutex-queue-length <mutex>)"],
  "description": "Returns the total number of threads waiting to acquire <mutex>.",
  "example": null
}, {
  "name": "mutex-queued?",
  "aliases": null,
  "signatures": ["(mutex-queued? <mutex>)"],
  "description": "Returns whether any thread is waiting for <mutex>.",
  "example": null
}, {
  "name": "mutex-hold-count",
  "aliases": null,
  "signatures": ["(mutex-hold-count <mutex>)"],
  "description": "Get the total number of holds on <mutex> by the current thread.",
  "example": null
}, {
  "name": "mutex-held?",
  "aliases": null,
  "signatures": ["(mutex-held? <mutex>)"],
  "description": "Returns whether <mutex> is held by the current thread.",
  "example": null
}]