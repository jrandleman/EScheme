[{
  "name": "hashmap",
  "aliases": null,
  "signatures": ["(hashmap <key> <value> ...)"],
  "description": "Construct a hashmap containing key-value associations of \"<key> <value> ...\".\nCreate hashmap literals via the {<key> <value> ...} syntax.\nHashmaps are applicable to a key to get their entry: (<hashmap> <key>)",
  "example": null
}, {
  "name": "hashmap-keys",
  "aliases": null,
  "signatures": ["(hashmap-keys <hashmap>)"],
  "description": "Get the keys of <hashmap> as a list.",
  "example": null
}, {
  "name": "hashmap-values",
  "aliases": null,
  "signatures": ["(hashmap-values <hashmap>)"],
  "description": "Get the values of <hashmap> as a list.",
  "example": null
}, {
  "name": "hashmap-key?",
  "aliases": null,
  "signatures": ["(hashmap-key? <hashmap> <obj>)"],
  "description": "Returns whether <obj> is a key in <hashmap>.",
  "example": null
}, {
  "name": "hashmap-ref",
  "aliases": null,
  "signatures": ["(hashmap-ref <hashmap> <key>)"],
  "description": "Get the value associated with <key> in <hashmap>.\nTriggers an error if <key> isn't in <hashmap>.\nEquivalent to: (<hashmap> <key>)",
  "example": null
}, {
  "name": "hashmap-set!",
  "aliases": null,
  "signatures": ["(hashmap-set! <hashmap> <key> <value>)"],
  "description": "Associate <value> to <key> in <hashmap>.\nReturns whether replaced an existing value.",
  "example": null
}, {
  "name": "hashmap-delete!",
  "aliases": null,
  "signatures": ["(hashmap-delete! <hashmap> <key>)"],
  "description": "Delete <key>'s association in <hashmap>. Returns whether succeeded.",
  "example": null
}, {
  "name": "hashmap-length",
  "aliases": null,
  "signatures": ["(hashmap-length <hashmap>)"],
  "description": "Returns the number of key-value associations in <hashmap>.",
  "example": null
}, {
  "name": "hashmap-empty?",
  "aliases": null,
  "signatures": ["(hashmap-empty? <hashmap>)"],
  "description": "Take a wild guess. No really, this one's pretty tricky. Alright, placed\nyour bets? Well, here's the shocking truth ladies and gentlemen, this\nprocedure (strangely enough) returns whether <hashmap> is as empty as I\nfeel when writing this documentation instead of programming.",
  "example": null
}, {
  "name": "hashmap-merge",
  "aliases": null,
  "signatures": ["(hashmap-merge <hashmap> ...)"],
  "description": "Returns a new <hashmap> combining all of the associations in \"<hashmap> ...\".",
  "example": null
}, {
  "name": "hashmap-merge!",
  "aliases": null,
  "signatures": ["(hashmap-merge! <hashmap> <merged-hashmap> ...)"],
  "description": "Combine all of the associations in \"<merged-hashmap> ...\" into <hashmap>.",
  "example": null
}, {
  "name": "hashmap?",
  "aliases": null,
  "signatures": ["(hashmap? <obj>)"],
  "description": "Returns whether <obj> is a hashmap.",
  "example": null
}, {
  "name": "hashcode",
  "aliases": null,
  "signatures": ["(hashcode <obj> ...)"],
  "description": "Returns the hashcode of \"<obj> ...\" combined with one another.\nUnused by any of the other hashmap primitives, but hey, it\ncould be useful to expose to users.",
  "example": null
}]