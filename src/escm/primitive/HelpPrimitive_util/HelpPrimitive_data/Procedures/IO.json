[{
  "name": "pretty-print",
  "aliases": ["pprint"],
  "signatures": ["(pretty-print <obj>)", "(pretty-print <output-port> <obj>)"],
  "description": "Pretty-print <obj> to <output-port> in indented, machine-readable form.\n<output-port> defaults to (current-output-port).\nAliased by \"pprint\".\nNote that this will infinitely loop for cyclical structures!",
  "example": null
}, {
  "name": "write",
  "aliases": null,
  "signatures": ["(write <obj>)", "(write <output-port> <obj>)"],
  "description": "Print <obj> to <output-port> in machine-readable form.\n<output-port> defaults to (current-output-port).\nNote that this will infinitely loop for cyclical structures!",
  "example": null
}, {
  "name": "display",
  "aliases": null,
  "signatures": ["(display <obj>)", "(display <output-port> <obj>)"],
  "description": "Print <obj> to <output-port> in human-readable form.\n<output-port> defaults to (current-output-port).\nNote that this will infinitely loop for cyclical structures!",
  "example": null
}, {
  "name": "pretty-printf",
  "aliases": ["pprintf"],
  "signatures": ["(pretty-printf <format-string> <arg> ...)", "(pretty-print <output-port> <format-string> <arg> ...)"],
  "description": "Pretty-print formatted <format-string> with \"<arg> ...\" to <output-port>\nin indented, machine-readable form. <output-port> defaults to\n(current-output-port).\nAliased by \"pprintf\".\nNote that this will infinitely loop for cyclical structures!\n>> <format-string> is like Java's printf with unique formatting patterns:\n   ----------------------------------------------------------------------\n   %a = display anything\n   %wa = write anything\n   %pa = pretty-print anything\n   ----------------------------------------------------------------------\n   %... = display unpacked list/vector/hashmap\n   %w... = write unpacked list/vector/hashmap\n   %p... = pretty-print unpacked list/vector/hashmap\n   ----------------------------------------------------------------------\n   %n = number\n   %+n = number (show sign if positive too)\n   %,n = number with commas\n   %En = %en = number (coerced to exact)\n   %In = %in = number (coerced to inexact)\n   %#rn = %#Rn = number (in radix <#> from 2 to 36)\n   %#n = number (left-padded with 0s to a width of <#> characters)\n   %.#n = number (with <#> digits of precision)\n   -> IE \"%+e2rn\": make exact in binary with sign\n   -> NOTE: 1) 0-padding & precision MUST be of 2 digits or less!\n            2) Can't have radix with I-coercion or precision!\n   ----------------------------------------------------------------------\n   %$ = display real finite as a dollar value\n   %,$ = display real finite as a dollar value seperated by commas\n   ----------------------------------------------------------------------\n   %s = display string\n   %#s = display string & pad left with # spaces\n   %-#s = display string & pad right with # spaces\n   %ws = write string\n   -> NOTE: padding MUST be of 3 digits or less (ie from -999 to 999)\n   ----------------------------------------------------------------------\n   %b  = bool\n   %wb = write \"true\" or \"false\" instead of \"#t\" or \"#f\"\n   ----------------------------------------------------------------------\n   %%  = \"%\" (escapes a \"%\")\n   ----------------------------------------------------------------------",
  "example": null
}, {
  "name": "writef",
  "aliases": null,
  "signatures": ["(writef <format-string> <arg> ...)", "(write <output-port> <format-string> <arg> ...)"],
  "description": "Print formatted <format-string> with \"<arg> ...\" to <output-port> in\nmachine-readable form. <output-port> defaults to (current-output-port).\nNote that this will infinitely loop for cyclical structures!\n>> <format-string> is like Java's printf with unique formatting patterns:\n   ----------------------------------------------------------------------\n   %a = display anything\n   %wa = write anything\n   %pa = pretty-print anything\n   ----------------------------------------------------------------------\n   %... = display unpacked list/vector/hashmap\n   %w... = write unpacked list/vector/hashmap\n   %p... = pretty-print unpacked list/vector/hashmap\n   ----------------------------------------------------------------------\n   %n = number\n   %+n = number (show sign if positive too)\n   %,n = number with commas\n   %En = %en = number (coerced to exact)\n   %In = %in = number (coerced to inexact)\n   %#rn = %#Rn = number (in radix <#> from 2 to 36)\n   %#n = number (left-padded with 0s to a width of <#> characters)\n   %.#n = number (with <#> digits of precision)\n   -> IE \"%+e2rn\": make exact in binary with sign\n   -> NOTE: 1) 0-padding & precision MUST be of 2 digits or less!\n            2) Can't have radix with I-coercion or precision!\n   ----------------------------------------------------------------------\n   %$ = display real finite as a dollar value\n   %,$ = display real finite as a dollar value seperated by commas\n   ----------------------------------------------------------------------\n   %s = display string\n   %#s = display string & pad left with # spaces\n   %-#s = display string & pad right with # spaces\n   %ws = write string\n   -> NOTE: padding MUST be of 3 digits or less (ie from -999 to 999)\n   ----------------------------------------------------------------------\n   %b  = bool\n   %wb = write \"true\" or \"false\" instead of \"#t\" or \"#f\"\n   ----------------------------------------------------------------------\n   %%  = \"%\" (escapes a \"%\")\n   ----------------------------------------------------------------------",
  "example": null
}, {
  "name": "displayf",
  "aliases": null,
  "signatures": ["(displayf <format-string> <arg> ...)", "(display <output-port> <format-string> <arg> ...)"],
  "description": "Print formatted <format-string> with \"<arg> ...\" to <output-port> in\nhuman-readable form. <output-port> defaults to (current-output-port).\nNote that this will infinitely loop for cyclical structures!\n>> <format-string> is like Java's printf with unique formatting patterns:\n   ----------------------------------------------------------------------\n   %a = display anything\n   %wa = write anything\n   %pa = pretty-print anything\n   ----------------------------------------------------------------------\n   %... = display unpacked list/vector/hashmap\n   %w... = write unpacked list/vector/hashmap\n   %p... = pretty-print unpacked list/vector/hashmap\n   ----------------------------------------------------------------------\n   %n = number\n   %+n = number (show sign if positive too)\n   %,n = number with commas\n   %En = %en = number (coerced to exact)\n   %In = %in = number (coerced to inexact)\n   %#rn = %#Rn = number (in radix <#> from 2 to 36)\n   %#n = number (left-padded with 0s to a width of <#> characters)\n   %.#n = number (with <#> digits of precision)\n   -> IE \"%+e2rn\": make exact in binary with sign\n   -> NOTE: 1) 0-padding & precision MUST be of 2 digits or less!\n            2) Can't have radix with I-coercion or precision!\n   ----------------------------------------------------------------------\n   %$ = display real finite as a dollar value\n   %,$ = display real finite as a dollar value seperated by commas\n   ----------------------------------------------------------------------\n   %s = display string\n   %#s = display string & pad left with # spaces\n   %-#s = display string & pad right with # spaces\n   %ws = write string\n   -> NOTE: padding MUST be of 3 digits or less (ie from -999 to 999)\n   ----------------------------------------------------------------------\n   %b  = bool\n   %wb = write \"true\" or \"false\" instead of \"#t\" or \"#f\"\n   ----------------------------------------------------------------------\n   %%  = \"%\" (escapes a \"%\")\n   ----------------------------------------------------------------------",
  "example": null
}, {
  "name": "newline",
  "aliases": ["terpri"],
  "signatures": ["(newline)", "(newline <output-port>)"],
  "description": "Print a newline to <output-port>. Equivalent to: (display \"\\n\").\n<output-port> defaults to (current-output-port).",
  "example": null
}, {
  "name": "read",
  "aliases": null,
  "signatures": ["(read)", "(read <input-port>)"],
  "description": "Read an EScheme datum from <input-port>.\n<input-port> defaults to (current-input-port).\nReturns #eof once reached <input-port>'s end.",
  "example": null
}, {
  "name": "read-string",
  "aliases": null,
  "signatures": ["(read-string <str>)"],
  "description": "Read an EScheme datum from the string. Returns a pair:\n  (cons <read-datum> <str-w/o-read-datum>)",
  "example": null
}, {
  "name": "read-line",
  "aliases": null,
  "signatures": ["(read-line)", "(read-line <input-port>)"],
  "description": "Read a line of text as a string from <input-port>.\n<input-port> defaults to (current-input-port).\nReturns #eof once reached <input-port>'s end.",
  "example": null
}, {
  "name": "eof?",
  "aliases": null,
  "signatures": ["(eof? <obj>)"],
  "description": "Returns whether <obj> is the #eof object.",
  "example": null
}]