[{
  "name": "file-read",
  "aliases": null,
  "signatures": ["(file-read <file-path-str>)"],
  "description": "Get the contents of <file-path-str> as an EScheme data structure.",
  "example": null
}, {
  "name": "file-read-string",
  "aliases": null,
  "signatures": ["(file-read-string <file-path-str>)"],
  "description": "Get the contents of <file-path-str> as a string.",
  "example": null
}, {
  "name": "file-write",
  "aliases": null,
  "signatures": ["(file-write <file-path-str> <obj>)"],
  "description": "Write <obj> to <file-path-str> using machine-readable syntax.",
  "example": null
}, {
  "name": "file-display",
  "aliases": null,
  "signatures": ["(file-display <file-path-str> <obj>)"],
  "description": "Write <obj> to <file-path-str> using human-readable syntax.",
  "example": null
}, {
  "name": "file-pretty-print",
  "aliases": null,
  "signatures": ["(file-pretty-print <file-path-str> <obj>)"],
  "description": "Write <obj> to <file-path-str> using indented machine-readable syntax.",
  "example": null
}, {
  "name": "file-write+",
  "aliases": null,
  "signatures": ["(file-write+ <file-path-str> <obj>)"],
  "description": "Append <obj> to <file-path-str> using machine-readable syntax.",
  "example": null
}, {
  "name": "file-display+",
  "aliases": null,
  "signatures": ["(file-display+ <file-path-str> <obj>)"],
  "description": "Append <obj> to <file-path-str> using human-readable syntax.",
  "example": null
}, {
  "name": "file-pretty-print+",
  "aliases": null,
  "signatures": ["(file-pretty-print+ <file-path-str> <obj>)"],
  "description": "Append <obj> to <file-path-str> using indented machine-readable syntax.",
  "example": null
}, {
  "name": "path?",
  "aliases": null,
  "signatures": ["(path? <path-str>)"],
  "description": "Returns whether <path-str> is a path (directory or file).",
  "example": null
}, {
  "name": "directory?",
  "aliases": null,
  "signatures": ["(directory? <path-str>)"],
  "description": "Returns whether <path-str> is a directory path.",
  "example": null
}, {
  "name": "file?",
  "aliases": null,
  "signatures": ["(file? <path-str>)"],
  "description": "Returns whether <path-str> is a file path.",
  "example": null
}, {
  "name": "file-delete!",
  "aliases": null,
  "signatures": ["(file-delete! <file-path-str>)"],
  "description": "Deletes <file-path-str>. Returns the deletion's success status.",
  "example": null
}, {
  "name": "directory-delete!",
  "aliases": null,
  "signatures": ["(directory-delete! <directory-path-str>)"],
  "description": "Deletes <directory-path-str> if its empty. Returns the deletion's success status.",
  "example": null
}, {
  "name": "directory-recursive-delete!",
  "aliases": null,
  "signatures": ["(directory-recursive-delete! <directory-path-str>)"],
  "description": "Deletes <directory-path-str> and its contents. Returns the deletion's success status.",
  "example": null
}, {
  "name": "path-delete!",
  "aliases": null,
  "signatures": ["(path-delete! <path-str>)"],
  "description": "Deletes <path-str> by dispatching to <file-delete!> or <directory-delete!>.\nReturns the deletion's success status.",
  "example": null
}, {
  "name": "path-recursive-delete!",
  "aliases": null,
  "signatures": ["(path-recursive-delete! <path-str>)"],
  "description": "Deletes <path-str> by dispatching to <file-delete!> or <directory-recursive-delete!>.\nReturns the deletion's success status.",
  "example": null
}, {
  "name": "directory-entries",
  "aliases": null,
  "signatures": ["(directory-entries <directory-path-str>)"],
  "description": "Returns a list of the directory entry paths in <directory-path-str>.\nReturns \"#f\" if <directory-path-str> doesn't denote a directory.",
  "example": null
}, {
  "name": "directory-entries*",
  "aliases": null,
  "signatures": ["(directory-entries* <directory-path-str>)"],
  "description": "Returns a list of the directory entry paths in <directory-path-str>, WITHOUT dot-files.\nNote that \"dot-file\" here refers to file names starting with \".\".\nReturns \"#f\" if <directory-path-str> doesn't denote a directory.",
  "example": null
}, {
  "name": "current-directory",
  "aliases": null,
  "signatures": ["(current-directory)"],
  "description": "Get the current working directory as a string.",
  "example": null
}, {
  "name": "path-parent",
  "aliases": null,
  "signatures": ["(path-parent <path-str>)"],
  "description": "Get <path-str>'s parent path. Returns #f if <path-str> doesn't have a parent.",
  "example": null
}, {
  "name": "path-file",
  "aliases": null,
  "signatures": ["(path-file <path-str>)"],
  "description": "Get <path-str>'s file name. Returns #f if <path-str> is empty.",
  "example": null
}, {
  "name": "make-directory",
  "aliases": null,
  "signatures": ["(make-directory <path-str>)"],
  "description": "Create <path-str> as a directory.\nFails if any directory midway in <path-str> doesn't exist.\nReturns whether succeeded.",
  "example": null
}, {
  "name": "make-directory!",
  "aliases": null,
  "signatures": ["(make-directory! <path-str>)"],
  "description": "Create <path-str> as a directory.\nCreates intermediate directories as needed while creating <path-str>.\nReturns whether succeeded.",
  "example": null
}, {
  "name": "absolute-path",
  "aliases": null,
  "signatures": ["(absolute-path <path-str>)"],
  "description": "Returns the absolute path of <path-str>.",
  "example": null
}, {
  "name": "file-extension",
  "aliases": null,
  "signatures": ["(file-extension <path-str>)"],
  "description": "Get the file extension of <path-str>. Returns #f if non-existant.",
  "example": null
}, {
  "name": "has-file-extension?",
  "aliases": null,
  "signatures": ["(has-file-extension? <path-str> <extension-str>)"],
  "description": "Returns whether <path-str> has <extension-str> as its file extension.",
  "example": null
}, {
  "name": "swap-file-extension",
  "aliases": null,
  "signatures": ["(swap-file-extension <path-str> <new-extension-str>)"],
  "description": "Returns <path-str> with <new-extension-str> as its file extension.",
  "example": null
}, {
  "name": "file-size",
  "aliases": null,
  "signatures": ["(file-size <file-path-str>)"],
  "description": "Return the size of <file-path-str> in bytes.\nPlatform-dependant result if <file-path-str> is a directory.",
  "example": null
}, {
  "name": "move-file",
  "aliases": null,
  "signatures": ["(move-file <old-path-str> <new-path-str>)"],
  "description": "Move <old-path-str> to be at <new-path-str> instead.\nTriggers an error if <new-path-str> already exists, or if\nany of the intermediate directories in <new-path-str> don't exist.",
  "example": null
}, {
  "name": "move-file!",
  "aliases": null,
  "signatures": ["(move-file! <old-path-str> <new-path-str>)"],
  "description": "Move <old-path-str> to be at <new-path-str> instead.\nReplaces <new-path-str> if it already exists, and creates\nany intermediate directories in <new-path-str> as needed.\nReturns whether succeeded.",
  "example": null
}, {
  "name": "copy-file",
  "aliases": null,
  "signatures": ["(copy-file <old-path-str> <new-path-str>)"],
  "description": "Copy <old-path-str> to <new-path-str>.\nTriggers an error if <new-path-str> already exists, or if\nany of the intermediate directories in <new-path-str> don't exist.",
  "example": null
}, {
  "name": "copy-file!",
  "aliases": null,
  "signatures": ["(copy-file! <old-path-str> <new-path-str>)"],
  "description": "Copy <old-path-str> to <new-path-str>.\nReplaces <new-path-str> if it already exists, and creates\nany intermediate directories in <new-path-str> as needed.\nReturns whether succeeded.",
  "example": null
}]