[{
  "name": "meta-object",
  "aliases": ["metaobject", "object"],
  "signatures": null,
  "description": "Super type of objects, classes, and interfaces.\nRefers to any entity that supports dot-notation to access a property.",
  "example": null
}, {
  "name": "number",
  "aliases": ["num"],
  "signatures": null,
  "description": "Represents a Java <double> under the hood, and parsed using the same syntax.",
  "example": null
}, {
  "name": "string",
  "aliases": ["str"],
  "signatures": null,
  "description": "Represents a Java <string> under the hood (hence immutable).\nLiterals are denoted via double-quotes.",
  "example": null
}, {
  "name": "character",
  "aliases": ["char"],
  "signatures": null,
  "description": "Reader literals have the '#\\' prefix: #\\h #\\e #\\l #\\l #\\o #\\!\n\nRepresented by a 32bit codepoint internally:\n  * In keeping with Java, any codepoint <= 16bits correlates to a true, single\n    character in strings.\n  * Any codepoint above 16bits (as in Java) becomes 2 separate characters in \n    strings.\n\nSupports Named Characters:\n  #\\space,     #\\tab, #\\newline, #\\page, #\\return,\n  #\\backspace, #\\nul, #\\esc,     #\\delete\n\nSupports Unicode Codepoints (note 'u' vs. 'U'):\n  #\\uXXXX (create a 16bit hex-code character)\n  #\\UXXXXXXXX (create a 32bit hex-code character)\n\nDisplaying characters prints them in a human-readable way, whereas writing them\nprints characters with their prefix such that they can be re-read by the reader.",
  "example": null
}, {
  "name": "void",
  "aliases": ["#void"],
  "signatures": null,
  "description": "The \"nothing\" type, typically returned by non-pure actions that end in '!'.\nDenoted via #void",
  "example": null
}, {
  "name": "nil",
  "aliases": ["null", "#nil"],
  "signatures": null,
  "description": "The \"null\" type terminating lists. Denoted via (quote ()) and #nil",
  "example": null
}, {
  "name": "boolean",
  "aliases": ["bool"],
  "signatures": null,
  "description": "The boolean type. #t is true and #f is false. Any non-false value is truthy.\nTypically returned by predicate actions that end in '?'.",
  "example": null
}, {
  "name": "keyword",
  "aliases": null,
  "signatures": null,
  "description": "Similar to symbols, but they always evaluate to themselves.\nDenoted as a symbol prefixed with ':'.",
  "example": null
}, {
  "name": "symbol",
  "aliases": ["sym"],
  "signatures": null,
  "description": "Extensively used by metaprograms, symbols are variables that\nevaluate to another value.",
  "example": null
}, {
  "name": "pair",
  "aliases": null,
  "signatures": null,
  "description": "An immutable pair of objects. <car> and <cdr> respectively get the 1st and 2nd\nitems. Right-nest them and end with #nil as the last <cdr> to create a list.\nCreate pair literals via the (<car> . <cdr>) syntax.",
  "example": "; The following are equivalent:\n\n(list 1 2 3)\n(cons 1 (cons 2 (cons 3 #nil)))"
}, {
  "name": "list",
  "aliases": null,
  "signatures": ["(list <obj> ...)", "(list)"],
  "description": "Return a list containing \"<obj> ...\". Given no args, returns (quote ()).\nCreate list literals via the (<item> ...) syntax.",
  "example": null
}, {
  "name": "vector",
  "aliases": null,
  "signatures": ["(vector <obj> ...)"],
  "description": "Construct a vector containing \"<obj> ...\".\nCreate vector literals via the [<item> ...] syntax.\nVectors are applicable to an index to get an entry: (<vector> <index>)",
  "example": null
}, {
  "name": "hashmap",
  "aliases": null,
  "signatures": ["(hashmap <key> <value> ...)"],
  "description": "Construct a hashmap containing key-value associations of \"<key> <value> ...\".\nCreate hashmap literals via the {<key> <value> ...} syntax.\nHashmaps are applicable to a key to get their entry: (<hashmap> <key>)",
  "example": null
}, {
  "name": "stream",
  "aliases": null,
  "signatures": null,
  "description": "A lazy alternative to lists, where each item is only evaluated once accessed.\nUse <scar> and <scdr> respectively to access to the 1st and 2nd items.",
  "example": "(define (sieve ints)\n  (def current-int (scar ints))\n  (scons \n    current-int\n    (stream-filter \n      (lambda (n) (positive? (remainder n current-int)))\n      (sieve (scdr ints)))))\n\n(define (ints-from n)\n  (scons n (ints-from (+ n 1))))\n\n(define primes (sieve (ints-from 2))) ; infinite stream of prime numbers!\n\n(display (stream->list primes 13))\n(newline)"
}, {
  "name": "stream-pair",
  "aliases": null,
  "signatures": null,
  "description": "A lazy alternative to pairs. Each item is only evaluated once accessed.\nNest them with #nil as the last <scdr> to create a stream.",
  "example": "(define (sieve ints)\n  (def current-int (scar ints))\n  (scons \n    current-int\n    (stream-filter \n      (lambda (n) (positive? (remainder n current-int)))\n      (sieve (scdr ints)))))\n\n(define (ints-from n)\n  (scons n (ints-from (+ n 1))))\n\n(define primes (sieve (ints-from 2))) ; infinite stream of prime numbers!\n\n(display (stream->list primes 13))\n(newline)"
}, {
  "name": "eof",
  "aliases": ["#eof"],
  "signatures": null,
  "description": "The \"end-of-file\" value terminating files.\nDenoted via #eof and detected via (eof? <obj>).\nEnds file/REPL evaluation early if read in as a single expression.",
  "example": null
}, {
  "name": "port",
  "aliases": ["input-port", "output-port"],
  "signatures": null,
  "description": "Input and output ports are handles for read and write files (respectively).\nNote that output functions that end in \"+\" append to the port, whereas the\nalternative clears it out first.",
  "example": null
}]