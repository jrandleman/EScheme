;; Author: Jordan Randleman -- ordered-collection.scm
;; => Tests for EScheme's primitive functions.
;;    Invoked by ../../main.scm

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IMPORTS
(load #path (append ".." *file-separator* ".." *file-separator* "lib.scm"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TESTS
(ut (ordered-collection? "") #t)
(ut (ordered-collection? []) #t)
(ut (ordered-collection? '()) #t)
(ut (ordered-collection? {}) #f)
(ut (ordered-collection? 0) #f)

(ut (oc? "") #t)
(ut (oc? []) #t)
(ut (oc? '()) #t)
(ut (oc? {}) #f)
(ut (oc? 0) #f)

(ut (conj 1 [2 4 6]) [2 4 6 1])
(ut (conj #\1 "246") "2461")
(ut (conj 1 '(2 4 6)) '(1 2 4 6))
(ut (conj 1 []) [1])
(ut (conj #\1 "") "1")
(ut (conj 1 '()) '(1))

(ut (init "1") "")
(ut (init [1]) [])
(ut (init '(1)) '())
(ut (init "12") "1")
(ut (init [1 2]) [1])
(ut (init '(1 2)) '(1))
(ut (init "123") "12")
(ut (init [1 2 3]) [1 2])
(ut (init '(1 2 3)) '(1 2))

(ut (last "1") #\1)
(ut (last [1]) 1)
(ut (last '(1)) 1)
(ut (last "12") #\2)
(ut (last [1 2]) 2)
(ut (last '(1 2)) 2)
(ut (last "123") #\3)
(ut (last [1 2 3]) 3)
(ut (last '(1 2 3)) 3)

(ut (slice "" 1) "")
(ut (slice "" 0 0) "")
(ut (slice "" 1 0) "")
(ut (slice "12345" 1 0) "")
(ut (slice "12345" 1 1) "2")
(ut (slice "12345" 0 100) "12345")
(ut (slice "12345" 0 (lambda (x) #t)) "1")
(ut (slice "12345" 0 (lambda (x) #f)) "12345")
(ut (slice "12345" 0 (lambda (x) (equal? x #\3))) "123")
(ut (slice "12345" 0) "12345")
(ut (slice "12345" 1) "2345")
(ut (slice "12345" 2) "345")
(ut (slice "12345" 5) "")

(ut (slice [] 1) [])
(ut (slice [] 0 0) [])
(ut (slice [] 1 0) [])
(ut (slice [1 2 3 4 5] 1 0) [])
(ut (slice [1 2 3 4 5] 1 1) [2])
(ut (slice [1 2 3 4 5] 0 100) [1 2 3 4 5])
(ut (slice [1 2 3 4 5] 0 (lambda (x) #t)) [1])
(ut (slice [1 2 3 4 5] 0 (lambda (x) #f)) [1 2 3 4 5])
(ut (slice [1 2 3 4 5] 0 (lambda (x) (equal? x 3))) [1 2 3])
(ut (slice [1 2 3 4 5] 0) [1 2 3 4 5])
(ut (slice [1 2 3 4 5] 1) [2 3 4 5])
(ut (slice [1 2 3 4 5] 2) [3 4 5])
(ut (slice [1 2 3 4 5] 5) [])

(ut (slice '() 1) '())
(ut (slice '() 0 0) '())
(ut (slice '() 1 0) '())
(ut (slice '(1 2 3 4 5) 1 0) '())
(ut (slice '(1 2 3 4 5) 1 1) '(2))
(ut (slice '(1 2 3 4 5) 0 100) '(1 2 3 4 5))
(ut (slice '(1 2 3 4 5) 0 (lambda (x) #t)) '(1))
(ut (slice '(1 2 3 4 5) 0 (lambda (x) #f)) '(1 2 3 4 5))
(ut (slice '(1 2 3 4 5) 0 (lambda (x) (equal? x 3))) '(1 2 3))
(ut (slice '(1 2 3 4 5) 0) '(1 2 3 4 5))
(ut (slice '(1 2 3 4 5) 1) '(2 3 4 5))
(ut (slice '(1 2 3 4 5) 2) '(3 4 5))
(ut (slice '(1 2 3 4 5) 5) '())

(ut (reverse "") "")
(ut (reverse '()) '())
(ut (reverse []) [])
(ut (reverse "1") "1")
(ut (reverse '(1)) '(1))
(ut (reverse [1]) [1])
(ut (reverse "12") "21")
(ut (reverse '(1 2)) '(2 1))
(ut (reverse [1 2]) [2 1])
(ut (reverse "12345") "54321")
(ut (reverse '(1 2 3 4 5)) '(5 4 3 2 1))
(ut (reverse [1 2 3 4 5]) [5 4 3 2 1])

(define (char->int ch) (- (char->integer ch) (char->integer #\0)))
(define even-char? (compose even? char->int))
(ut (remove-first even? []) [])
(ut (remove-first even? '()) '())
(ut (remove-first even-char? "") "")
(ut (remove-first even? [1]) [1])
(ut (remove-first even? '(1)) '(1))
(ut (remove-first even-char? "1") "1")
(ut (remove-first even? [2]) [])
(ut (remove-first even? '(2)) '())
(ut (remove-first even-char? "2") "")
(ut (remove-first even? [2 2]) [2])
(ut (remove-first even? '(2 2)) '(2))
(ut (remove-first even-char? "22") "2")
(ut (remove-first even? [1 2]) [1])
(ut (remove-first even? '(1 2)) '(1))
(ut (remove-first even-char? "12") "1")
(ut (remove-first even? [2 1 2]) [1 2])
(ut (remove-first even? '(2 1 2)) '(1 2))
(ut (remove-first even-char? "212") "12")

(ut (remove-last even? []) [])
(ut (remove-last even? '()) '())
(ut (remove-last even-char? "") "")
(ut (remove-last even? [1]) [1])
(ut (remove-last even? '(1)) '(1))
(ut (remove-last even-char? "1") "1")
(ut (remove-last even? [2]) [])
(ut (remove-last even? '(2)) '())
(ut (remove-last even-char? "2") "")
(ut (remove-last even? [2 2]) [2])
(ut (remove-last even? '(2 2)) '(2))
(ut (remove-last even-char? "22") "2")
(ut (remove-last even? [1 2]) [1])
(ut (remove-last even? '(1 2)) '(1))
(ut (remove-last even-char? "12") "1")
(ut (remove-last even? [2 1 2]) [2 1])
(ut (remove-last even? '(2 1 2)) '(2 1))
(ut (remove-last even-char? "212") "21")

(ut (skip even? []) #f)
(ut (skip even? [2]) #f)
(ut (skip even? [1]) 1)
(ut (skip even? [2 4]) #f)
(ut (skip even? [2 4 1]) 1)
(ut (skip even? [1 2 4]) 1)
(ut (skip even? [1 2 4 3]) 1)
(ut (skip even? '()) #f)
(ut (skip even? '(2)) #f)
(ut (skip even? '(1)) 1)
(ut (skip even? '(2 4)) #f)
(ut (skip even? '(2 4 1)) 1)
(ut (skip even? '(1 2 4)) 1)
(ut (skip even? '(1 2 4 3)) 1)
(ut (skip even-char? "") #f)
(ut (skip even-char? "2") #f)
(ut (skip even-char? "1") #\1)
(ut (skip even-char? "24") #f)
(ut (skip even-char? "241") #\1)
(ut (skip even-char? "124") #\1)
(ut (skip even-char? "1243") #\1)

(ut (skip-right even? []) #f)
(ut (skip-right even? [2]) #f)
(ut (skip-right even? [1]) 1)
(ut (skip-right even? [2 4]) #f)
(ut (skip-right even? [2 4 1]) 1)
(ut (skip-right even? [1 2 4]) 1)
(ut (skip-right even? [1 2 4 3]) 3)
(ut (skip-right even? '()) #f)
(ut (skip-right even? '(2)) #f)
(ut (skip-right even? '(1)) 1)
(ut (skip-right even? '(2 4)) #f)
(ut (skip-right even? '(2 4 1)) 1)
(ut (skip-right even? '(1 2 4)) 1)
(ut (skip-right even? '(1 2 4 3)) 3)
(ut (skip-right even-char? "") #f)
(ut (skip-right even-char? "2") #f)
(ut (skip-right even-char? "1") #\1)
(ut (skip-right even-char? "24") #f)
(ut (skip-right even-char? "241") #\1)
(ut (skip-right even-char? "124") #\1)
(ut (skip-right even-char? "1243") #\3)

(define (char- c n) (- (char->int c) n))
(ut (fold-right - 0 []) 0)
(ut (fold-right - 0 [3]) 3)
(ut (fold-right - 0 [2 3]) -1)
(ut (fold-right - 0 [1 2 3]) 2)
(ut (fold-right - 0 '()) 0)
(ut (fold-right - 0 '(3)) 3)
(ut (fold-right - 0 '(2 3)) -1)
(ut (fold-right - 0 '(1 2 3)) 2)
(ut (fold-right char- 0 "") 0)
(ut (fold-right char- 0 "3") 3)
(ut (fold-right char- 0 "23") -1)
(ut (fold-right char- 0 '"123") 2)

(define (char-- k c n) (- (char->int k) (char->int c) n))
(ut (fold-right - 0 [] []) 0)
(ut (fold-right - 0 [3] [3]) 0)
(ut (fold-right - 0 [2 3] [2 3]) 0)
(ut (fold-right - 0 [1 2 3] [1 2 3]) 0)
(ut (fold-right - 0 '() '()) 0)
(ut (fold-right - 0 '(3) '(3)) 0)
(ut (fold-right - 0 '(2 3) '(2 3)) 0)
(ut (fold-right - 0 '(1 2 3) '(1 2 3)) 0)
(ut (fold-right char-- 0 "" "") 0)
(ut (fold-right char-- 0 "3" "3") 0)
(ut (fold-right char-- 0 "23" "23") 0)
(ut (fold-right char-- 0 '"123" '"123") 0)

(define (char++ k c n) (+ (char->int k) (char->int c) n))
(ut (fold-right + 0 [] []) 0)
(ut (fold-right + 0 [3] [3]) 6)
(ut (fold-right + 0 [2 3] [2 3]) 10)
(ut (fold-right + 0 [1 2 3] [1 2 3]) 12)
(ut (fold-right + 0 '() '()) 0)
(ut (fold-right + 0 '(3) '(3)) 6)
(ut (fold-right + 0 '(2 3) '(2 3)) 10)
(ut (fold-right + 0 '(1 2 3) '(1 2 3)) 12)
(ut (fold-right char++ 0 "" "") 0)
(ut (fold-right char++ 0 "3" "3") 6)
(ut (fold-right char++ 0 "23" "23") 10)
(ut (fold-right char++ 0 '"123" '"123") 12)

(ut (key-right even? '(2)) 0)
(ut (key-right even? '(2 4)) 1)
(ut (key-right even? '(1 2 3 4 5)) 3)

(ut (drop-right [] 100) [])
(ut (drop-right '() 100) '())
(ut (drop-right "" 100) "")
(ut (drop-right [1] 100) [])
(ut (drop-right '(1) 100) '())
(ut (drop-right "1" 100) "")
(ut (drop-right [1 2 3 4 5] 3) [1 2])
(ut (drop-right '(1 2 3 4 5) 3) '(1 2))
(ut (drop-right "12345" 3) "12")

(ut (drop-while (lambda (x) #t) []) [])
(ut (drop-while (lambda (x) #t) '()) '())
(ut (drop-while (lambda (x) #t) "") "")
(ut (drop-while (lambda (x) #t) [1 2 3]) [])
(ut (drop-while (lambda (x) #t) '(1 2 3)) '())
(ut (drop-while (lambda (x) #t) "123") "")
(ut (drop-while (lambda (x) #f) []) [])
(ut (drop-while (lambda (x) #f) '()) '())
(ut (drop-while (lambda (x) #f) "") "")
(ut (drop-while (lambda (x) #f) [1 2 3]) [1 2 3])
(ut (drop-while (lambda (x) #f) '(1 2 3)) '(1 2 3))
(ut (drop-while (lambda (x) #f) "123") "123")
(ut (drop-while (bind > 3) [1 2 3]) [3])
(ut (drop-while (bind > 3) '(1 2 3)) '(3))
(ut (drop-while (bind char>? #\3) "123") "3")

(ut (drop-right-while (lambda (x) #t) []) [])
(ut (drop-right-while (lambda (x) #t) '()) '())
(ut (drop-right-while (lambda (x) #t) "") "")
(ut (drop-right-while (lambda (x) #t) [1 2 3]) [])
(ut (drop-right-while (lambda (x) #t) '(1 2 3)) '())
(ut (drop-right-while (lambda (x) #t) "123") "")
(ut (drop-right-while (lambda (x) #f) []) [])
(ut (drop-right-while (lambda (x) #f) '()) '())
(ut (drop-right-while (lambda (x) #f) "") "")
(ut (drop-right-while (lambda (x) #f) [1 2 3]) [1 2 3])
(ut (drop-right-while (lambda (x) #f) '(1 2 3)) '(1 2 3))
(ut (drop-right-while (lambda (x) #f) "123") "123")
(ut (drop-right-while (bind < 1) [1 2 3]) [1])
(ut (drop-right-while (bind < 1) '(1 2 3)) '(1))
(ut (drop-right-while (bind char<? #\1) "123") "1")

(ut (take-right [] 100) [])
(ut (take-right '() 100) '())
(ut (take-right "" 100) "")
(ut (take-right [1] 100) [1])
(ut (take-right '(1) 100) '(1))
(ut (take-right "1" 100) "1")
(ut (take-right [1 2 3 4 5] 3) [3 4 5])
(ut (take-right '(1 2 3 4 5) 3) '(3 4 5))
(ut (take-right "12345" 3) "345")

(ut (take-while (lambda (x) #t) []) [])
(ut (take-while (lambda (x) #t) '()) '())
(ut (take-while (lambda (x) #t) "") "")
(ut (take-while (lambda (x) #t) [1 2 3]) [1 2 3])
(ut (take-while (lambda (x) #t) '(1 2 3)) '(1 2 3))
(ut (take-while (lambda (x) #t) "123") "123")
(ut (take-while (lambda (x) #f) []) [])
(ut (take-while (lambda (x) #f) '()) '())
(ut (take-while (lambda (x) #f) "") "")
(ut (take-while (lambda (x) #f) [1 2 3]) [])
(ut (take-while (lambda (x) #f) '(1 2 3)) '())
(ut (take-while (lambda (x) #f) "123") "")
(ut (take-while (bind > 3) [1 2 3]) [1 2])
(ut (take-while (bind > 3) '(1 2 3)) '(1 2))
(ut (take-while (bind char>? #\3) "123") "12")

(ut (take-right-while (lambda (x) #t) []) [])
(ut (take-right-while (lambda (x) #t) '()) '())
(ut (take-right-while (lambda (x) #t) "") "")
(ut (take-right-while (lambda (x) #t) [1 2 3]) [1 2 3])
(ut (take-right-while (lambda (x) #t) '(1 2 3)) '(1 2 3))
(ut (take-right-while (lambda (x) #t) "123") "123")
(ut (take-right-while (lambda (x) #f) []) [])
(ut (take-right-while (lambda (x) #f) '()) '())
(ut (take-right-while (lambda (x) #f) "") "")
(ut (take-right-while (lambda (x) #f) [1 2 3]) [])
(ut (take-right-while (lambda (x) #f) '(1 2 3)) '())
(ut (take-right-while (lambda (x) #f) "123") "")
(ut (take-right-while (bind < 1) [1 2 3]) [2 3])
(ut (take-right-while (bind < 1) '(1 2 3)) '(2 3))
(ut (take-right-while (bind char<? #\1) "123") "23")

(ut (sort < '()) '())
(ut (sort < []) [])
(ut (sort char<? "") "")
(ut (sort < '(1)) '(1))
(ut (sort < [1]) [1])
(ut (sort char<? "1") "1")
(ut (sort < '(3 2 1)) '(1 2 3))
(ut (sort < [3 2 1]) [1 2 3])
(ut (sort char<? "321") "123")
(ut (sort < '(1 2 3)) '(1 2 3))
(ut (sort < [1 2 3]) [1 2 3])
(ut (sort char<? "123") "123")
(ut (sort < '(4 3 2 1)) '(1 2 3 4))
(ut (sort < [4 3 2 1]) [1 2 3 4])
(ut (sort char<? "4321") "1234")
(ut (sort < '(1 2 3 4)) '(1 2 3 4))
(ut (sort < [1 2 3 4]) [1 2 3 4])
(ut (sort char<? "1234") "1234")

(ut (sorted? char<? "") #t)
(ut (sorted? char<? "1234") #t)
(ut (sorted? char<? "4321") #f)
(ut (sorted? char<? "12234") #f)
(ut (sorted? char<=? "12234") #t)
(ut (sorted? char<? "11234") #f)
(ut (sorted? char<=? "11234") #t)
(ut (sorted? char<? "12344") #f)
(ut (sorted? char<=? "12344") #t)

(ut (sorted? < []) #t)
(ut (sorted? < [1 2 3 4]) #t)
(ut (sorted? < [4 3 2 1]) #f)
(ut (sorted? < [1 2 2 3 4]) #f)
(ut (sorted? <= [1 2 2 3 4]) #t)
(ut (sorted? < [1 1 2 3 4]) #f)
(ut (sorted? <= [1 1 2 3 4]) #t)
(ut (sorted? < [1 2 3 4 4]) #f)
(ut (sorted? <= [1 2 3 4 4]) #t)

(ut (sorted? < '()) #t)
(ut (sorted? < '(1 2 3 4)) #t)
(ut (sorted? < '(4 3 2 1)) #f)
(ut (sorted? < '(1 2 2 3 4)) #f)
(ut (sorted? <= '(1 2 2 3 4)) #t)
(ut (sorted? < '(1 1 2 3 4)) #f)
(ut (sorted? <= '(1 1 2 3 4)) #t)
(ut (sorted? < '(1 2 3 4 4)) #f)
(ut (sorted? <= '(1 2 3 4 4)) #t)

(ut (merge char<? "" "") "")
(ut (merge < '() '()) '())
(ut (merge < [] []) [])
(ut (merge < [] "") [])
(ut (merge < '() []) '())
(ut (merge < '(1 3 5) '(2 4 6)) '(1 2 3 4 5 6))
(ut (merge < [1 3 5] [2 4 6]) [1 2 3 4 5 6])
(ut (merge char<? "135" "246") "123456")
(ut (merge char<? "123" "") "123")
(ut (merge char<? "" "123") "123")
(ut (merge < '(1 2 3) '()) '(1 2 3))
(ut (merge < '() '(1 2 3)) '(1 2 3))
(ut (merge < [1 2 3] []) [1 2 3])
(ut (merge < [] [1 2 3]) [1 2 3])

(ut (delete-neighbor-duplicates char=? "") "")
(ut (delete-neighbor-duplicates char=? "1") "1")
(ut (delete-neighbor-duplicates char=? "11") "1")
(ut (delete-neighbor-duplicates char=? "1122334455") "12345")
(ut (delete-neighbor-duplicates = '()) '())
(ut (delete-neighbor-duplicates = '(1)) '(1))
(ut (delete-neighbor-duplicates = '(1 1)) '(1))
(ut (delete-neighbor-duplicates = '(1 1 2 2 3 3 4 4 5 5)) '(1 2 3 4 5))
(ut (delete-neighbor-duplicates = []) [])
(ut (delete-neighbor-duplicates = [1]) [1])
(ut (delete-neighbor-duplicates = [1 1]) [1])
(ut (delete-neighbor-duplicates = [1 1 2 2 3 3 4 4 5 5]) [1 2 3 4 5])
